import{_ as a,p as e,q as l,a1 as s}from"./framework-5866ffd3.js";const t={},o=s('<p style="text-indent:2em;"><span style="color:#303030;font-family:Verdana, Helvetica, Arial;background-color:#FFFFFF;">先介绍下基本概念：</span></p><p style="text-indent:2em;"><span style="color:#303030;font-family:Verdana, Helvetica, Arial;background-color:#FFFFFF;">类装载器是用来把类(class)装载进JVM的。</span></p><p style="text-indent:2em;"><span style="color:#303030;font-family:Verdana, Helvetica, Arial;background-color:#FFFFFF;">JVM规范定义了两种类型的类装载器：</span>启动内装载器(bootstrap)和用户自定义装载器(user-defined class loader)<span style="color:#303030;font-family:Verdana, Helvetica, Arial;background-color:#FFFFFF;">。 </span></p><p style="text-indent:2em;"><span style="color:#303030;font-family:Verdana, Helvetica, Arial;background-color:#FFFFFF;"><br></span></p><p style="text-indent:2em;"> JVM在运行时会产生三个ClassLoader:Bootstrap ClassLoader、Extension ClassLoader和AppClassLoader.<span style="color:#303030;font-family:Verdana, Helvetica, Arial;background-color:#FFFFFF;">Bootstrap是用C++编写的，我们在Java中看不到它,是null,是JVM自带的类装载器，用来装载核心类库，如java.lang.*等。</span><br> AppClassLoader的Parent是ExtClassLoader，而ExtClassLoader的Parent为Bootstrap ClassLoader。<br><span style="color:#303030;font-family:Verdana, Helvetica, Arial;background-color:#FFFFFF;"> </span></p><p style="text-indent:2em;"> Java提供了抽象类ClassLoader，所有用户自定义类装载器都实例化自ClassLoader的子类。 System Class Loader是一个特殊的用户自定义类装载器，由JVM的实现者提供，在编程者不特别指定装载器的情况下默认装载用户类<span style="color:#303030;font-family:Verdana, Helvetica, Arial;background-color:#FFFFFF;">。系统类装载器可以通过ClassLoader.getSystemClassLoader() 方法得到。</span></p><p style="text-indent:2em;"><span style="color:#303030;font-family:Verdana, Helvetica, Arial;background-color:#FFFFFF;"><br></span></p><p style="text-indent:2em;"><span style="color:#303030;font-family:&#39;Verdana, Helvetica, Arial&#39;;">java类开始执行是从appClassLoader开始的，自定义的classloader的默认parent就是appClassLoader</span></p><p style="text-indent:2em;"><span style="color:#303030;font-family:&#39;Verdana, Helvetica, Arial&#39;;">每个ClassLoader维护一个命名空间，一个命名空间内不准出现两个name相同的class </span></p><p style="text-indent:2em;"><span style="color:#303030;font-family:&#39;Verdana, Helvetica, Arial&#39;;">理解了这些，那么我们来了解一下WebApp下的ClassLoader层次，以tomcat为例</span></p><p style="text-indent:2em;"><span style="color:#303030;font-family:&#39;Verdana, Helvetica, Arial&#39;;">tomcat为每个app分配了一个 WebappClassLoader ，这样来避免多个app会加载相同jar包的问题，</span></p><p style="text-indent:2em;"><span style="color:#303030;font-family:&#39;Verdana, Helvetica, Arial&#39;;">WebappLoader的parent是 <span>StandardClassLoader,这样多个app就能共享tomcat的类库</span></span></p><p style="text-indent:2em;"><span style="color:#303030;font-family:&#39;Verdana, Helvetica, Arial&#39;;">当tomcat为每个请求启动线程后，会将该线程的classloader设为 WebappLoader，如果不设置，那么新建的线程默认为 父线程的classloader。 </span></p><p style="text-indent:2em;"><span style="color:#303030;font-family:&#39;Verdana, Helvetica, Arial&#39;;">案例， 如何在request中使用自定义classloader生成了一个class </span></p><p style="text-indent:2em;"><span style="color:#303030;font-family:&#39;Verdana, Helvetica, Arial&#39;;">              classloader的默认parent 为appclassloader，因此 classloader只能引用一些jdk的class，不能引用webappClassLoader范围的class，最好就将classloader 的parent设为 this.getClass().getClassLoader()。 如果你有特殊需求就需要你来根据classloader的层次和范围来进行设置。</span></p><p style="text-indent:2em;"> 之前我对classloader只知道分为3个层次，自定义classloader的parent的问题一直没注意，昨天写代码出现了这个问题，今天才意识到是parent的问题，自己写了一个test证实了这个问题，写出来分享一下 </p>',16),n=[o];function r(p,c){return e(),l("div",null,n)}const i=a(t,[["render",r],["__file","2012-278.html.vue"]]);export{i as default};
