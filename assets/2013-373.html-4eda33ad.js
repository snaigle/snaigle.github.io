import{_ as d,p as i,q as v,a1 as t}from"./framework-5866ffd3.js";const l={},o=t('<p> 有一些网友看了前两天的《<a href="http://coolshell.cn/articles/8883.html">Linux下应该知道的技巧</a>》希望我能教教他们用awk和sed，所以，出现了这篇文章。我估计这些80后的年轻朋友可能对awk/sed这类上古神器有点陌生了，所以需要我这个老家伙来炒炒冷饭。<strong>况且，AWK是贝尔实验室1977年搞出来的文本出现神器，今年是蛇年，是AWK的本命年，而且年纪和我相仿，所以非常有必要为他写篇文章</strong>。 </p><p> 之所以叫AWK是因为其取了三位创始人 <a href="http://en.wikipedia.org/wiki/Alfred_Aho">Alfred Aho</a>，<a href="http://en.wikipedia.org/wiki/Peter_J._Weinberger">Peter Weinberger</a>, 和 <a href="http://en.wikipedia.org/wiki/Brian_Kernighan">Brian Kernighan</a> 的Family Name的首字符。要学AWK，就得提一提AWK的一本相当经典的书《<a href="http://plan9.bell-labs.com/cm/cs/awkbook/">The AWK Programming Language</a>》，它在<a href="http://book.douban.com/subject/1876898/">豆瓣上的评分</a>是9.4分！在<a href="http://www.amazon.cn/mn/detailApp/?asin=020107981X">亚马逊上居然卖1022.30元</a>。 </p><p> 我在这里的教程并不想面面俱到，本文和我之前的<a href="http://coolshell.cn/articles/8460.html">Go语言简介</a>一样，全是示例，基本无废话。 </p><p><strong>我只想达到两个目的：</strong></p><p><strong>1）你可以在乘坐公交地铁上下班，或是在坐马桶拉大便时读完（保证是一泡大便的工夫）。</strong></p><p><strong>2）我只想让这篇博文像一个火辣的脱衣舞女挑起你的兴趣，然后还要你自己去下工夫去撸。</strong></p><p> 废话少说，我们开始脱吧（注：这里只是topless）。 </p><h4> 起步上台 </h4><p> 我从netstat命令中提取了如下信息作为用例： </p><p></p><div><div><table><tbody><tr><td><div> 1 </div><div> 2 </div><div> 3 </div><div> 4 </div><div> 5 </div><div> 6 </div><div> 7 </div><div> 8 </div><div> 9 </div><div> 10 </div><div> 11 </div><div> 12 </div><div> 13 </div><div> 14 </div><div> 15 </div><div> 16 </div><div> 17 </div><div> 18 </div><div> 19 </div><div> 20 </div></td><td><div><div> $catnetstat.txt </div><div> Proto Recv-Q Send-Q Local-Address          Foreign-Address             State </div><div> tcp        0      0 0.0.0.0:3306           0.0.0.0:*                   LISTEN </div><div> tcp        0      0 0.0.0.0:80             0.0.0.0:*                   LISTEN </div><div> tcp        0      0 127.0.0.1:9000         0.0.0.0:*                   LISTEN </div><div> tcp        0      0 coolshell.cn:80        124.205.5.146:18245         TIME_WAIT </div><div> tcp        0      0 coolshell.cn:80        61.140.101.185:37538        FIN_WAIT2 </div><div> tcp        0      0 coolshell.cn:80        110.194.134.189:1032        ESTABLISHED </div><div> tcp        0      0 coolshell.cn:80        123.169.124.111:49809       ESTABLISHED </div><div> tcp        0      0 coolshell.cn:80        116.234.127.77:11502        FIN_WAIT2 </div><div> tcp        0      0 coolshell.cn:80        123.169.124.111:49829       ESTABLISHED </div><div> tcp        0      0 coolshell.cn:80        183.60.215.36:36970         TIME_WAIT </div><div> tcp        0   4166 coolshell.cn:80        61.148.242.38:30901         ESTABLISHED </div><div> tcp        0      1 coolshell.cn:80        124.152.181.209:26825       FIN_WAIT1 </div><div> tcp        0      0 coolshell.cn:80        110.194.134.189:4796        ESTABLISHED </div><div> tcp        0      0 coolshell.cn:80        183.60.212.163:51082        TIME_WAIT </div><div> tcp        0      1 coolshell.cn:80        208.115.113.92:50601        LAST_ACK </div><div> tcp        0      0 coolshell.cn:80        123.169.124.111:49840       ESTABLISHED </div><div> tcp        0      0 coolshell.cn:80        117.136.20.85:50025         FIN_WAIT2 </div><div> tcp        0      0 :::22                  :::*                        LISTEN </div></div></td></tr></tbody></table></div></div><p> 下面是最简单最常用的awk示例，其输出第1列和第4例， </p><ul><li> 其中单引号中的被大括号括着的就是awk的语句，注意，其只能被单引号包含。 </li><li> 其中的$1..$n表示第几例。注：$0表示整个行。 </li></ul><div><div><table><tbody><tr><td><div> 1 </div><div> 2 </div><div> 3 </div><div> 4 </div><div> 5 </div><div> 6 </div><div> 7 </div><div> 8 </div><div> 9 </div><div> 10 </div><div> 11 </div><div> 12 </div><div> 13 </div><div> 14 </div><div> 15 </div><div> 16 </div><div> 17 </div><div> 18 </div><div> 19 </div><div> 20 </div></td><td><div><div> $awk&#39;{print $1, $4}&#39;netstat.txt </div><div> Proto Local-Address </div><div> tcp 0.0.0.0:3306 </div><div> tcp 0.0.0.0:80 </div><div> tcp 127.0.0.1:9000 </div><div> tcp coolshell.cn:80 </div><div> tcp coolshell.cn:80 </div><div> tcp coolshell.cn:80 </div><div> tcp coolshell.cn:80 </div><div> tcp coolshell.cn:80 </div><div> tcp coolshell.cn:80 </div><div> tcp coolshell.cn:80 </div><div> tcp coolshell.cn:80 </div><div> tcp coolshell.cn:80 </div><div> tcp coolshell.cn:80 </div><div> tcp coolshell.cn:80 </div><div> tcp coolshell.cn:80 </div><div> tcp coolshell.cn:80 </div><div> tcp coolshell.cn:80 </div><div> tcp :::22 </div></div></td></tr></tbody></table></div></div><p> 我们再来看看awk的格式化输出，和C语言的printf没什么两样： </p><div><div><table><tbody><tr><td><div> 1 </div><div> 2 </div><div> 3 </div><div> 4 </div><div> 5 </div><div> 6 </div><div> 7 </div><div> 8 </div><div> 9 </div><div> 10 </div><div> 11 </div><div> 12 </div><div> 13 </div><div> 14 </div><div> 15 </div><div> 16 </div><div> 17 </div><div> 18 </div><div> 19 </div><div> 20 </div></td><td><div><div> $awk&#39;{printf &quot;%-8s %-8s %-8s %-18s %-22s %-15s\\n&quot;,$1,$2,$3,$4,$5,$6}&#39;netstat.txt </div><div> Proto    Recv-Q   Send-Q   Local-Address      Foreign-Address        State </div><div> tcp      0        0        0.0.0.0:3306       0.0.0.0:*              LISTEN </div><div> tcp      0        0        0.0.0.0:80         0.0.0.0:*              LISTEN </div><div> tcp      0        0        127.0.0.1:9000     0.0.0.0:*              LISTEN </div><div> tcp      0        0        coolshell.cn:80    124.205.5.146:18245    TIME_WAIT </div><div> tcp      0        0        coolshell.cn:80    61.140.101.185:37538   FIN_WAIT2 </div><div> tcp      0        0        coolshell.cn:80    110.194.134.189:1032   ESTABLISHED </div><div> tcp      0        0        coolshell.cn:80    123.169.124.111:49809  ESTABLISHED </div><div> tcp      0        0        coolshell.cn:80    116.234.127.77:11502   FIN_WAIT2 </div><div> tcp      0        0        coolshell.cn:80    123.169.124.111:49829  ESTABLISHED </div><div> tcp      0        0        coolshell.cn:80    183.60.215.36:36970    TIME_WAIT </div><div> tcp      0        4166     coolshell.cn:80    61.148.242.38:30901    ESTABLISHED </div><div> tcp      0        1        coolshell.cn:80    124.152.181.209:26825  FIN_WAIT1 </div><div> tcp      0        0        coolshell.cn:80    110.194.134.189:4796   ESTABLISHED </div><div> tcp      0        0        coolshell.cn:80    183.60.212.163:51082   TIME_WAIT </div><div> tcp      0        1        coolshell.cn:80    208.115.113.92:50601   LAST_ACK </div><div> tcp      0        0        coolshell.cn:80    123.169.124.111:49840  ESTABLISHED </div><div> tcp      0        0        coolshell.cn:80    117.136.20.85:50025    FIN_WAIT2 </div><div> tcp      0        0        :::22              :::*                   LISTEN </div></div></td></tr></tbody></table></div></div><h4> 脱掉外套 </h4><h5> 过滤记录 </h5><p> 我们再来看看如何过滤记录（下面过滤条件为：第三列的值为0 &amp;&amp; 第6列的值为LISTEN） </p><div><div><table><tbody><tr><td><div> 1 </div><div> 2 </div><div> 3 </div><div> 4 </div><div> 5 </div></td><td><div><div> $awk&#39;$3==0 &amp;&amp; $6==&quot;LISTEN&quot; &#39;netstat.txt </div><div> tcp        0      0 0.0.0.0:3306               0.0.0.0:*              LISTEN </div><div> tcp        0      0 0.0.0.0:80                 0.0.0.0:*              LISTEN </div><div> tcp        0      0 127.0.0.1:9000             0.0.0.0:*              LISTEN </div><div> tcp        0      0 :::22                      :::*                   LISTEN </div></div></td></tr></tbody></table></div></div><p> 其中的“==”为比较运算符。其他比较运算符：!=, &gt;, &lt;, &gt;=, &lt;= </p><p> 我们来看看各种过滤记录的方式： </p><div><div><table><tbody><tr><td><div> 1 </div><div> 2 </div><div> 3 </div><div> 4 </div><div> 5 </div></td><td><div><div> $awk&#39; $3&gt;0 {print $0}&#39;netstat.txt </div><div> Proto Recv-Q Send-Q Local-Address          Foreign-Address             State </div><div> tcp        0   4166 coolshell.cn:80        61.148.242.38:30901         ESTABLISHED </div><div> tcp        0      1 coolshell.cn:80        124.152.181.209:26825       FIN_WAIT1 </div><div> tcp        0      1 coolshell.cn:80        208.115.113.92:50601        LAST_ACK </div></div></td></tr></tbody></table></div></div><p> 如果我们需要表头的话，我们可以引入内建变量NR： </p><div><div><table><tbody><tr><td><div> 1 </div><div> 2 </div><div> 3 </div><div> 4 </div><div> 5 </div><div> 6 </div></td><td><div><div> $awk&#39;$3==0 &amp;&amp; $6==&quot;LISTEN&quot; || NR==1 &#39;netstat.txt </div><div> Proto Recv-Q Send-Q Local-Address          Foreign-Address             State </div><div> tcp        0      0 0.0.0.0:3306           0.0.0.0:*                   LISTEN </div><div> tcp        0      0 0.0.0.0:80             0.0.0.0:*                   LISTEN </div><div> tcp        0      0 127.0.0.1:9000         0.0.0.0:*                   LISTEN </div><div> tcp        0      0 :::22                  :::*                        LISTEN </div></div></td></tr></tbody></table></div></div><p> 再加上格式化输出： </p><div><div><table><tbody><tr><td><div> 1 </div><div> 2 </div><div> 3 </div><div> 4 </div><div> 5 </div><div> 6 </div></td><td><div><div> $awk&#39;$3==0 &amp;&amp; $6==&quot;LISTEN&quot; || NR==1 {printf &quot;%-20s %-20s %s\\n&quot;,$4,$5,$6}&#39;netstat.txt </div><div> Local-Address        Foreign-Address      State </div><div> 0.0.0.0:3306         0.0.0.0:*            LISTEN </div><div> 0.0.0.0:80           0.0.0.0:*            LISTEN </div><div> 127.0.0.1:9000       0.0.0.0:*            LISTEN </div><div> :::22                :::*                 LISTEN </div></div></td></tr></tbody></table></div></div><h5><strong>内建变量</strong></h5><p> 说到了内建变量，我们可以来看看awk的一些内建变量： </p><table><tbody><tr><td> $0 </td><td> 当前记录（这个变量中存放着整个行的内容） </td></tr><tr><td> $1~$n </td><td> 当前记录的第n个字段，字段间由FS分隔 </td></tr><tr><td> FS </td><td> 输入字段分隔符 默认是空格或Tab </td></tr><tr><td> NF </td><td> 当前记录中的字段个数，就是有多少列 </td></tr><tr><td> NR </td><td> 已经读出的记录数，就是行号，从1开始，如果有多个文件话，这个值也是不断累加中。 </td></tr><tr><td> FNR </td><td> 当前记录数，与NR不同的是，这个值会是各个文件自己的行号 </td></tr><tr><td> RS </td><td> 输入的记录分隔符， 默认为换行符 </td></tr><tr><td> OFS </td><td> 输出字段分隔符， 默认也是空格 </td></tr><tr><td> ORS </td><td> 输出的记录分隔符，默认为换行符 </td></tr><tr><td> FILENAME </td><td> 当前输入文件的名字 </td></tr></tbody></table><p> 怎么使用呢，比如：我们如果要输出行号： </p><div><div><table><tbody><tr><td><div> 1 </div><div> 2 </div><div> 3 </div><div> 4 </div><div> 5 </div><div> 6 </div><div> 7 </div></td><td><div><div> $awk&#39;$3==0 &amp;&amp; $6==&quot;ESTABLISHED&quot; || NR==1 {printf &quot;%02s %s %-20s %-20s %s\\n&quot;,NR, FNR, $4,$5,$6}&#39;netstat.txt </div><div> 01 1 Local-Address        Foreign-Address      State </div><div> 07 7 coolshell.cn:80      110.194.134.189:1032 ESTABLISHED </div><div> 08 8 coolshell.cn:80      123.169.124.111:49809 ESTABLISHED </div><div> 10 10 coolshell.cn:80      123.169.124.111:49829 ESTABLISHED </div><div> 14 14 coolshell.cn:80      110.194.134.189:4796 ESTABLISHED </div><div> 17 17 coolshell.cn:80      123.169.124.111:49840 ESTABLISHED </div></div></td></tr></tbody></table></div></div><h5><strong>指定分隔符</strong></h5><div><div><table><tbody><tr><td><div> 1 </div><div> 2 </div><div> 3 </div><div> 4 </div><div> 5 </div><div> 6 </div><div> 7 </div><div> 8 </div><div> 9 </div></td><td><div><div> $ awk &#39;BEGIN{FS=&quot;:&quot;} {print $1,$3,$6}&#39;/etc/passwd </div><div> root 0/root </div><div> bin 1/bin </div><div> daemon 2/sbin </div><div> adm 3/var/adm </div><div> lp 4/var/spool/lpd </div><div> sync5/sbin </div><div> shutdown6/sbin </div><div> halt 7/sbin </div></div></td></tr></tbody></table></div></div><p> 上面的命令也等价于：（-F的意思就是指定分隔符） </p><div><div><table><tbody><tr><td><div> 1 </div></td><td><div><div> $awk -F:&#39;{print $1,$3,$6}&#39;/etc/passwd </div></div></td></tr></tbody></table></div></div><p> 注：如果你要指定多个分隔符，你可以这样来： </p><div><div><table><tbody><tr><td><div> 1 </div></td><td><div><div> awk-F&#39;[;:]&#39; </div></div></td></tr></tbody></table></div></div><p> 再来看一个以\\t作为分隔符输出的例子（下面使用了/etc/passwd文件，这个文件是以:分隔的）： </p><div><div><table><tbody><tr><td><div> 1 </div><div> 2 </div><div> 3 </div><div> 4 </div><div> 5 </div><div> 6 </div><div> 7 </div></td><td><div><div> $awk -F:&#39;{print $1,$3,$6}&#39;OFS=&quot;\\t&quot;/etc/passwd </div><div> root    0      /root </div><div> bin     1      /bin </div><div> daemon  2      /sbin </div><div> adm     3      /var/adm </div><div> lp      4      /var/spool/lpd </div><div> sync   5      /sbin </div></div></td></tr></tbody></table></div></div><h4> 脱掉衬衫 </h4><h5> 字符串匹配 </h5><p> 我们再来看几个字符串匹配的示例： </p><div><div><table><tbody><tr><td><div> 1 </div><div> 2 </div><div> 3 </div><div> 4 </div><div> 5 </div><div> 6 </div><div> 7 </div><div> 8 </div><div> 9 </div><div> 10 </div><div> 11 </div><div> 12 </div><div> 13 </div><div> 14 </div><div> 15 </div><div> 16 </div></td><td><div><div> $awk&#39;$6 ~ /FIN/ || NR==1 {print NR,$4,$5,$6}&#39;OFS=&quot;\\t&quot;netstat.txt </div><div> 1       Local-Address   Foreign-Address State </div><div> 6       coolshell.cn:80 61.140.101.185:37538    FIN_WAIT2 </div><div> 9       coolshell.cn:80 116.234.127.77:11502    FIN_WAIT2 </div><div> 13      coolshell.cn:80 124.152.181.209:26825   FIN_WAIT1 </div><div> 18      coolshell.cn:80 117.136.20.85:50025     FIN_WAIT2 </div><div>   </div><div> $ $awk&#39;$6 ~ /WAIT/ || NR==1 {print NR,$4,$5,$6}&#39;OFS=&quot;\\t&quot;netstat.txt </div><div> 1       Local-Address   Foreign-Address State </div><div> 5       coolshell.cn:80 124.205.5.146:18245     TIME_WAIT </div><div> 6       coolshell.cn:80 61.140.101.185:37538    FIN_WAIT2 </div><div> 9       coolshell.cn:80 116.234.127.77:11502    FIN_WAIT2 </div><div> 11      coolshell.cn:80 183.60.215.36:36970     TIME_WAIT </div><div> 13      coolshell.cn:80 124.152.181.209:26825   FIN_WAIT1 </div><div> 15      coolshell.cn:80 183.60.212.163:51082    TIME_WAIT </div><div> 18      coolshell.cn:80 117.136.20.85:50025     FIN_WAIT2 </div></div></td></tr></tbody></table></div></div><p> 上面的第一个示例匹配FIN状态， 第二个示例匹配WAIT字样的状态。其实 ~ 表示模式开始。/ /中是模式。这就是一个正则表达式的匹配。 </p><p> 其实awk可以像grep一样的去匹配第一行，就像这样： </p><div><div><table><tbody><tr><td><div> 1 </div><div> 2 </div><div> 3 </div><div> 4 </div><div> 5 </div></td><td><div><div> $awk&#39;/LISTEN/&#39;netstat.txt </div><div> tcp        0      0 0.0.0.0:3306            0.0.0.0:*               LISTEN </div><div> tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN </div><div> tcp        0      0 127.0.0.1:9000          0.0.0.0:*               LISTEN </div><div> tcp        0      0 :::22                   :::*                    LISTEN </div></div></td></tr></tbody></table></div></div><p> 我们可以使用 “/FIN|TIME/” 来匹配 FIN 或者 TIME : </p><div><div><table><tbody><tr><td><div> 1 </div><div> 2 </div><div> 3 </div><div> 4 </div><div> 5 </div><div> 6 </div><div> 7 </div><div> 8 </div><div> 9 </div></td><td><div><div> $awk&#39;$6 ~ /FIN|TIME/ || NR==1 {print NR,$4,$5,$6}&#39;OFS=&quot;\\t&quot;netstat.txt </div><div> 1       Local-Address   Foreign-Address State </div><div> 5       coolshell.cn:80 124.205.5.146:18245     TIME_WAIT </div><div> 6       coolshell.cn:80 61.140.101.185:37538    FIN_WAIT2 </div><div> 9       coolshell.cn:80 116.234.127.77:11502    FIN_WAIT2 </div><div> 11      coolshell.cn:80 183.60.215.36:36970     TIME_WAIT </div><div> 13      coolshell.cn:80 124.152.181.209:26825   FIN_WAIT1 </div><div> 15      coolshell.cn:80 183.60.212.163:51082    TIME_WAIT </div><div> 18      coolshell.cn:80 117.136.20.85:50025     FIN_WAIT2 </div></div></td></tr></tbody></table></div></div><p> 再来看看模式取反的例子： </p><div><div><table><tbody><tr><td><div> 1 </div><div> 2 </div><div> 3 </div><div> 4 </div><div> 5 </div><div> 6 </div><div> 7 </div><div> 8 </div><div> 9 </div><div> 10 </div><div> 11 </div><div> 12 </div><div> 13 </div></td><td><div><div> $awk&#39;$6 !~ /WAIT/ || NR==1 {print NR,$4,$5,$6}&#39;OFS=&quot;\\t&quot;netstat.txt </div><div> 1       Local-Address   Foreign-Address State </div><div> 2       0.0.0.0:3306    0.0.0.0:*       LISTEN </div><div> 3       0.0.0.0:80      0.0.0.0:*       LISTEN </div><div> 4       127.0.0.1:9000  0.0.0.0:*       LISTEN </div><div> 7       coolshell.cn:80 110.194.134.189:1032    ESTABLISHED </div><div> 8       coolshell.cn:80 123.169.124.111:49809   ESTABLISHED </div><div> 10      coolshell.cn:80 123.169.124.111:49829   ESTABLISHED </div><div> 12      coolshell.cn:80 61.148.242.38:30901     ESTABLISHED </div><div> 14      coolshell.cn:80 110.194.134.189:4796    ESTABLISHED </div><div> 16      coolshell.cn:80 208.115.113.92:50601    LAST_ACK </div><div> 17      coolshell.cn:80 123.169.124.111:49840   ESTABLISHED </div><div> 19      :::22   :::*    LISTEN </div></div></td></tr></tbody></table></div></div><p> 或是： </p><div><div><table><tbody><tr><td><div> 1 </div></td><td><div><div> awk&#39;!/WAIT/&#39;netstat.txt </div></div></td></tr></tbody></table></div></div><p><strong>折分文件</strong></p><p> awk拆分文件很简单，使用重定向就好了。下面这个例子，是按第6例分隔文件，相当的简单（其中的NR!=1表示不处理表头）。 </p><div><div><table><tbody><tr><td><div> 1 </div><div> 2 </div><div> 3 </div><div> 4 </div><div> 5 </div><div> 6 </div><div> 7 </div><div> 8 </div><div> 9 </div><div> 10 </div><div> 11 </div><div> 12 </div><div> 13 </div><div> 14 </div><div> 15 </div><div> 16 </div><div> 17 </div><div> 18 </div><div> 19 </div><div> 20 </div><div> 21 </div><div> 22 </div><div> 23 </div><div> 24 </div><div> 25 </div><div> 26 </div><div> 27 </div><div> 28 </div><div> 29 </div><div> 30 </div><div> 31 </div><div> 32 </div><div> 33 </div><div> 34 </div></td><td><div><div> $awk&#39;NR!=1{print &gt; $6}&#39;netstat.txt </div><div>   </div><div> $ls </div><div> ESTABLISHED  FIN_WAIT1  FIN_WAIT2  LAST_ACK  LISTEN netstat.txt  TIME_WAIT </div><div>   </div><div> $catESTABLISHED </div><div> tcp        0      0 coolshell.cn:80        110.194.134.189:1032        ESTABLISHED </div><div> tcp        0      0 coolshell.cn:80        123.169.124.111:49809       ESTABLISHED </div><div> tcp        0      0 coolshell.cn:80        123.169.124.111:49829       ESTABLISHED </div><div> tcp        0   4166 coolshell.cn:80        61.148.242.38:30901         ESTABLISHED </div><div> tcp        0      0 coolshell.cn:80        110.194.134.189:4796        ESTABLISHED </div><div> tcp        0      0 coolshell.cn:80        123.169.124.111:49840       ESTABLISHED </div><div>   </div><div> $catFIN_WAIT1 </div><div> tcp        0      1 coolshell.cn:80        124.152.181.209:26825       FIN_WAIT1 </div><div>   </div><div> $catFIN_WAIT2 </div><div> tcp        0      0 coolshell.cn:80        61.140.101.185:37538        FIN_WAIT2 </div><div> tcp        0      0 coolshell.cn:80        116.234.127.77:11502        FIN_WAIT2 </div><div> tcp        0      0 coolshell.cn:80        117.136.20.85:50025         FIN_WAIT2 </div><div>   </div><div> $catLAST_ACK </div><div> tcp        0      1 coolshell.cn:80        208.115.113.92:50601        LAST_ACK </div><div>   </div><div> $catLISTEN </div><div> tcp        0      0 0.0.0.0:3306           0.0.0.0:*                   LISTEN </div><div> tcp        0      0 0.0.0.0:80             0.0.0.0:*                   LISTEN </div><div> tcp        0      0 127.0.0.1:9000         0.0.0.0:*                   LISTEN </div><div> tcp        0      0 :::22                  :::*                        LISTEN </div><div>   </div><div> $catTIME_WAIT </div><div> tcp        0      0 coolshell.cn:80        124.205.5.146:18245         TIME_WAIT </div><div> tcp        0      0 coolshell.cn:80        183.60.215.36:36970         TIME_WAIT </div><div> tcp        0      0 coolshell.cn:80        183.60.212.163:51082        TIME_WAIT </div></div></td></tr></tbody></table></div></div><p> 你也可以把指定的列输出到文件： </p><div><div><table><tbody><tr><td><div> 1 </div></td><td><div><div> awk&#39;NR!=1{print $4,$5 &gt; $6}&#39;netstat.txt </div></div></td></tr></tbody></table></div></div><p> 再复杂一点：（注意其中的if-else-if语句，可见awk其实是个脚本解释器） </p><div><div><table><tbody><tr><td><div> 1 </div><div> 2 </div><div> 3 </div><div> 4 </div><div> 5 </div><div> 6 </div><div> 7 </div><div> 8 </div><div> 9 </div><div> 10 </div><div> 11 </div><div> 12 </div><div> 13 </div><div> 14 </div><div> 15 </div><div> 16 </div><div> 17 </div><div> 18 </div><div> 19 </div><div> 20 </div><div> 21 </div><div> 22 </div><div> 23 </div><div> 24 </div><div> 25 </div><div> 26 </div><div> 27 </div><div> 28 </div><div> 29 </div><div> 30 </div></td><td><div><div> $awk&#39;NR!=1{if($6 ~/TIME|ESTABLISHED/) print &gt;&quot;1.txt&quot;; </div><div> elseif($6 ~/LISTEN/) print &gt;&quot;2.txt&quot;; </div><div> elseprint &gt;&quot;3.txt&quot;}&#39;netstat.txt </div><div>   </div><div> $ls?.txt </div><div> 1.txt  2.txt  3.txt </div><div>   </div><div> $cat1.txt </div><div> tcp        0      0 coolshell.cn:80        124.205.5.146:18245         TIME_WAIT </div><div> tcp        0      0 coolshell.cn:80        110.194.134.189:1032        ESTABLISHED </div><div> tcp        0      0 coolshell.cn:80        123.169.124.111:49809       ESTABLISHED </div><div> tcp        0      0 coolshell.cn:80        123.169.124.111:49829       ESTABLISHED </div><div> tcp        0      0 coolshell.cn:80        183.60.215.36:36970         TIME_WAIT </div><div> tcp        0   4166 coolshell.cn:80        61.148.242.38:30901         ESTABLISHED </div><div> tcp        0      0 coolshell.cn:80        110.194.134.189:4796        ESTABLISHED </div><div> tcp        0      0 coolshell.cn:80        183.60.212.163:51082        TIME_WAIT </div><div> tcp        0      0 coolshell.cn:80        123.169.124.111:49840       ESTABLISHED </div><div>   </div><div> $cat2.txt </div><div> tcp        0      0 0.0.0.0:3306           0.0.0.0:*                   LISTEN </div><div> tcp        0      0 0.0.0.0:80             0.0.0.0:*                   LISTEN </div><div> tcp        0      0 127.0.0.1:9000         0.0.0.0:*                   LISTEN </div><div> tcp        0      0 :::22                  :::*                        LISTEN </div><div>   </div><div> $cat3.txt </div><div> tcp        0      0 coolshell.cn:80        61.140.101.185:37538        FIN_WAIT2 </div><div> tcp        0      0 coolshell.cn:80        116.234.127.77:11502        FIN_WAIT2 </div><div> tcp        0      1 coolshell.cn:80        124.152.181.209:26825       FIN_WAIT1 </div><div> tcp        0      1 coolshell.cn:80        208.115.113.92:50601        LAST_ACK </div><div> tcp        0      0 coolshell.cn:80        117.136.20.85:50025         FIN_WAIT2 </div></div></td></tr></tbody></table></div></div><h5> 统计 </h5><p> 下面的命令计算所有的C文件，CPP文件和H文件的文件大小总和。 </p><div><div><table><tbody><tr><td><div> 1 </div><div> 2 </div></td><td><div><div> $ls-l  *.cpp *.c *.h |awk&#39;{sum+=$5} END {print sum}&#39; </div><div> 2511401 </div></div></td></tr></tbody></table></div></div><p> 我们再来看一个统计各个connection状态的用法：（我们可以看到一些编程的影子了，大家都是程序员我就不解释了。注意其中的数组的用法） </p><div><div><table><tbody><tr><td><div> 1 </div><div> 2 </div><div> 3 </div><div> 4 </div><div> 5 </div><div> 6 </div><div> 7 </div></td><td><div><div> $awk&#39;NR!=1{a[$6]++;} END {for (i in a) print i &quot;, &quot; a[i];}&#39;netstat.txt </div><div> TIME_WAIT, 3 </div><div> FIN_WAIT1, 1 </div><div> ESTABLISHED, 6 </div><div> FIN_WAIT2, 3 </div><div> LAST_ACK, 1 </div><div> LISTEN, 4 </div></div></td></tr></tbody></table></div></div><p> 再来看看统计每个用户的进程的占了多少内存（注：sum的RSS那一列） </p><div><div><table><tbody><tr><td><div> 1 </div><div> 2 </div><div> 3 </div><div> 4 </div><div> 5 </div><div> 6 </div></td><td><div><div> $psaux |awk&#39;NR!=1{a[$1]+=$6;} END { for(i in a) print i &quot;, &quot; a[i]&quot;KB&quot;;}&#39; </div><div> dbus, 540KB </div><div> mysql, 99928KB </div><div> www, 3264924KB </div><div> root, 63644KB </div><div> hchen, 6020KB </div></div></td></tr></tbody></table></div></div><h4> 脱掉内衣 </h4><h5> awk脚本 </h5><p> 在上面我们可以看到一个END关键字。END的意思是“处理完所有的行的标识”，即然说到了END就有必要介绍一下BEGIN，这两个关键字意味着执行前和执行后的意思，语法如下： </p><ul><li> BEGIN{ 这里面放的是执行前的语句 } </li><li> END {这里面放的是处理完所有的行后要执行的语句 } </li><li> {这里面放的是处理每一行时要执行的语句} </li></ul><p> 为了说清楚这个事，我们来看看下面的示例： </p><p> 假设有这么一个文件（学生成绩表）： </p><div><div><table><tbody><tr><td><div> 1 </div><div> 2 </div><div> 3 </div><div> 4 </div><div> 5 </div><div> 6 </div></td><td><div><div> $catscore.txt </div><div> Marry   2143 78 84 77 </div><div> Jack    2321 66 78 45 </div><div> Tom     2122 48 77 71 </div><div> Mike    2537 87 97 95 </div><div> Bob     2415 40 57 62 </div></div></td></tr></tbody></table></div></div><p> 我们的awk脚本如下（我没有写有命令行上是因为命令行上不易读，另外也在介绍另一种用法）： </p><div><div><table><tbody><tr><td><div> 1 </div><div> 2 </div><div> 3 </div><div> 4 </div><div> 5 </div><div> 6 </div><div> 7 </div><div> 8 </div><div> 9 </div><div> 10 </div><div> 11 </div><div> 12 </div><div> 13 </div><div> 14 </div><div> 15 </div><div> 16 </div><div> 17 </div><div> 18 </div><div> 19 </div><div> 20 </div><div> 21 </div><div> 22 </div><div> 23 </div><div> 24 </div></td><td><div><div> $catcal.awk </div><div> #!/bin/awk -f </div><div> #运行前 </div><div> BEGIN { </div><div>     math = 0 </div><div>     english = 0 </div><div>     computer = 0 </div><div>   </div><div>     printf&quot;NAME    NO.   MATH  ENGLISH  COMPUTER   TOTAL\\n&quot; </div><div>     printf&quot;---------------------------------------------\\n&quot; </div><div> } </div><div> #运行中 </div><div> { </div><div>     math+=$3 </div><div>     english+=$4 </div><div>     computer+=$5 </div><div>     printf&quot;%-6s %-6s %4d %8d %8d %8d\\n&quot;, $1, $2, $3,$4,$5, $3+$4+$5 </div><div> } </div><div> #运行后 </div><div> END { </div><div>     printf&quot;---------------------------------------------\\n&quot; </div><div>     printf&quot;  TOTAL:%10d %8d %8d \\n&quot;, math, english, computer </div><div>     printf&quot;AVERAGE:%10.2f %8.2f %8.2f\\n&quot;, math/NR, english/NR, computer/NR </div><div> } </div></div></td></tr></tbody></table></div></div><p> 我们来看一下执行结果：（也可以这样运行 ./cal.awk score.txt） </p><div><div><table><tbody><tr><td><div> 1 </div><div> 2 </div><div> 3 </div><div> 4 </div><div> 5 </div><div> 6 </div><div> 7 </div><div> 8 </div><div> 9 </div><div> 10 </div><div> 11 </div></td><td><div><div> $awk-fcal.awkscore.txt </div><div> NAME    NO.   MATH  ENGLISH  COMPUTER   TOTAL </div><div> --------------------------------------------- </div><div> Marry  2143     78       84       77      239 </div><div> Jack   2321     66       78       45      189 </div><div> Tom    2122     48       77       71      196 </div><div> Mike   2537     87       97       95      279 </div><div> Bob    2415     40       57       62      159 </div><div> --------------------------------------------- </div><div>   TOTAL:       319      393      350 </div><div> AVERAGE:     63.80    78.60    70.00 </div></div></td></tr></tbody></table></div></div><h5> 环境变量 </h5><p> 即然说到了脚本，我们来看看怎么和环境变量交互：（使用-v参数和ENVIRON，使用ENVIRON的环境变量需要export） </p><div><div><table><tbody><tr><td><div> 1 </div><div> 2 </div><div> 3 </div><div> 4 </div><div> 5 </div><div> 6 </div><div> 7 </div><div> 8 </div><div> 9 </div><div> 10 </div><div> 11 </div><div> 12 </div><div> 13 </div><div> 14 </div></td><td><div><div> $ x=5 </div><div>   </div><div> $ y=10 </div><div> $exporty </div><div>   </div><div> $echo$x $y </div><div> 5 10 </div><div>   </div><div> $awk-vval=$x&#39;{print $1, $2, $3, $4+val, $5+ENVIRON[&quot;y&quot;]}&#39;OFS=&quot;\\t&quot;score.txt </div><div> Marry   2143    78      89      87 </div><div> Jack    2321    66      83      55 </div><div> Tom     2122    48      82      81 </div><div> Mike    2537    87      102     105 </div><div> Bob     2415    40      62      72 </div></div></td></tr></tbody></table></div></div><h4> 几个花活 </h4><p> 最后，我们再来看几个小例子： </p><div><div><table><tbody><tr><td><div> 1 </div><div> 2 </div><div> 3 </div><div> 4 </div><div> 5 </div><div> 6 </div><div> 7 </div><div> 8 </div></td><td><div><div> #从file文件中找出长度大于80的行 </div><div> awk&#39;length&gt;80&#39;file </div><div>   </div><div> #按连接数查看客户端IP </div><div> netstat-ntu |awk&#39;{print $5}&#39;|cut-d: -f1 |sort|uniq-c |sort-nr </div><div>   </div><div> #打印99乘法表 </div><div> seq9 |sed&#39;H;g&#39;|awk-vRS=&#39;&#39;&#39;{for(i=1;i&lt;=NF;i++)printf(&quot;%dx%d=%d%s&quot;, i, NR, i*NR, i==NR?&quot;\\n&quot;:&quot;\\t&quot;)}&#39; </div></div></td></tr></tbody></table></div></div><h4> 自己撸吧 </h4><p> 关于其中的一些知识点可以参看<a href="http://www.gnu.org/software/gawk/manual/gawk.html">gawk的手册</a>： </p><ul><li> 内建变量，参看：<a href="http://www.gnu.org/software/gawk/manual/gawk.html#Built_002din-Variables">http://www.gnu.org/software/gawk/manual/gawk.html#Built_002din-Variables</a></li><li> 流控方面，参看：<a href="http://www.gnu.org/software/gawk/manual/gawk.html#Statements">http://www.gnu.org/software/gawk/manual/gawk.html#Statements</a></li><li> 内建函数，参看：<a href="http://www.gnu.org/software/gawk/manual/gawk.html#Built_002din">http://www.gnu.org/software/gawk/manual/gawk.html#Built_002din</a></li><li> 正则表达式，参看：<a href="http://www.gnu.org/software/gawk/manual/gawk.html#Regexp">http://www.gnu.org/software/gawk/manual/gawk.html#Regexp</a></li></ul><p> （全文完） </p><div><p><strong>（转载本站文章请注明作者和出处 <a href="http://coolshell.cn/">酷壳 – CoolShell.cn</a> ，请勿用于任何商业用途）</strong></p></div>',89),c=[o];function e(a,n){return i(),v("div",null,c)}const s=d(l,[["render",e],["__file","2013-373.html.vue"]]);export{s as default};
