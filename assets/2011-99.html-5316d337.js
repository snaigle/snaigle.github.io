import{_ as s,p as i,q as l,t,R as e}from"./framework-5866ffd3.js";const n={},r=e("p",null,[t("公司的项目使用struts1，这时我接触到了tiles，这个页面增强布局框架，使用了将近半年，感觉良好。最近有一个个人项目我采用nutz，感到只用jsp太麻烦，于是想将tiles整合进来。tiles一般是和struts这样的框架整合的例子多，单独用的几乎没有。于是狠下心去看tiles的主页，终于有了收获，用了一下午加一晚上终于跑通了例子，并将nutzView写好了"),e("br"),e("br"),t("首先我使用了tiles2.2，去官网下载 bin包。"),e("br"),t("解压后，选取 tiles-jsp,tiles-core,tiles-servlet,tiles-api,"),e("br"),t("slf4j-api,slf4j-log4j12,conmmons-beanutils,commons-digester,commons-logging,jcl-over-slf4j,log4j这些jar，copy到 lib下。"),e("br"),t("然后")],-1),o=e("pre",{name:"code",class:"java"},'public class TestTileFactory extends BasicTilesContainerFactory {	    @Override	    protected List<URL> getSourceURLs(TilesApplicationContext applicationContext,	            TilesRequestContextFactory contextFactory) {	        List<URL> urls = new ArrayList<URL>();	        try {	            urls.add(applicationContext.getResource("/WEB-INF/tiles-defs.xml"));	        } catch (IOException e) {	            throw new DefinitionsFactoryException(	                    "Cannot load definition URLs", e);	        }	        return urls;	    }}  ',-1),c=e("p",null,"  再添加 类",-1),a=e("p",null,[t("  "),e("span",{style:{"white-space":"pre"}},"public class TestTilesListener extends AbstractTilesListener {")],-1),p=e("pre",{name:"code",class:"java"},"	    @Override	    protected TilesInitializer createTilesInitializer() {	        return new TestTilesListenerInitializer();	    }	    private static class TestTilesListenerInitializer extends AbstractTilesInitializer {	        @Override	        protected AbstractTilesContainerFactory createContainerFactory(	                TilesApplicationContext context) {	            return new TestTileFactory();	        }	    }}",-1),u=e("p",null," 在web.xml中添加配置 ",-1),d=e("p",null,[t(" "),e("span",{style:{"white-space":"pre"}},"<listener>")],-1),_=e("pre",{name:"code",class:"java"},"  		<listener-class>com.sh169.util.TestTilesListener</listener-class>  </listener>",-1),m=e("p",null," 然后是，添加nutz的view",-1),h=e("p",null," 下面是代码",-1),T=e("p",null,[t(" "),e("span",{style:{"white-space":"pre"}},"public class TilesView implements View{")],-1),v=e("pre",{name:"code",class:"java"},'	private String viewName;		public TilesView(){}	public TilesView(String viewName){		this.viewName = viewName;	}	@SuppressWarnings("deprecation")	@Override	public void render(HttpServletRequest req, HttpServletResponse resp,			Object obj) throws Throwable {		req.setAttribute("obj", obj);		TilesContainer tc = TilesAccess.getContainer(req.getSession().getServletContext());		tc.render(viewName, req,resp);	}}public TilesViewMaker(){}	@Override	public View make(Ioc ioc, String type, String value) {		if("tiles".equalsIgnoreCase(type))			return new TilesView(value);		return null;	}',-1),b=e("p",null," ",-1),w=e("p",null,' 使用时添加 @ok("tiles:yourdefname")即可',-1),g=e("p",null," ",-1),j=e("p",null,"使用感受：引用的jar包太多了，精简到4个比较能接受，还有这是2.1中的例子，在2.2中tilesAccess中的 getContainer方法被提示不可用，应该有其他方法可以替代，以后有时间研究下 tiles的源码，自己整理成一个jar包，这样引用比较方便",-1),x=e("p",null,"我感觉包这样划分比较好，tile-core，tile-jsp，tile-freemarker，依次类推。这样使用起来将会很方便，而且logger也应该写一个logger类，替代common-logging的功能，这样能少引用几个类。",-1),y=e("p",null,"好了要睡觉了，剩下的明天再研究。",-1);function f(C,L){return i(),l("div",null,[r,t("   "),o,t(),c,t(),a,t(),p,t(),u,t(),d,t(),_,t(),m,t(),h,t(),T,t(),v,t(),b,t(),w,t(),g,t(),j,t(),x,t(),y])}const S=s(n,[["render",f],["__file","2011-99.html.vue"]]);export{S as default};
