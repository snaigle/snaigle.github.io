import{_ as t,p as n,q as l,t as s,R as e}from"./framework-5866ffd3.js";const p={},o=e("p",null,"首先从一次完整的的请求说起：（以此为例get,www,baidu.com）",-1),c=e("p",null,"1，webbrower 发出request，",-1),_=e("p",null,"2，然后解析www.baidu.com为ip,找到ip的服务器，",-1),i=e("p",null,"3，服务器处理请求资源并返回请求的内容，",-1),h=e("p",null,"4，browser接受请求内容过程，（返回内容是按顺序读取的）",-1),a=e("p",null,[e("span",{style:{"white-space":"pre"}}),s("4.1遇到外联css，就会并发去读取css内容（），")],-1),d=e("p",null,[e("span",{style:{"white-space":"pre"}}),s("4.2遇到图片时，回去并发读取图片，目前浏览器的并发数为2，")],-1),u=e("p",null,[e("span",{style:{"white-space":"pre"}}),s("4.3遇到js时则会阻塞其他请求。")],-1),r=e("p",null,[e("span",{style:{"white-space":"pre"}}),s("4.4加载完css后，browse开始渲染页面，")],-1),w=e("p",null,[e("span",{style:{"white-space":"pre"}}),s("4.5直到加载完页面中的文本资源，这时dom的结构已经确定，会出发 document.ready方法")],-1),y=e("p",null,[e("span",{style:{"white-space":"pre"}}),s("4.6 browse继续加载 图片和js，完成后。页面就全部加载完成，这时会出发 window.onload()方法")],-1),m=e("p",null," ",-1),j=e("p",null,"来分析一下里面具体的时间开销：",-1),b=e("p",null,[e("span",{style:{"white-space":"pre"}}),s("1，从1--4.4 用户才开始看到页面上有内容，在这以前页面就是空白的")],-1),f=e("p",null,[e("span",{style:{"white-space":"pre"}}),s("2，解析域名也是有一定时间开销的，如果是大机房的可以通过路由配置 dns 缓存，依赖于外部机房环境，可控性比较小。  ")],-1),x=e("p",null,[e("span",{style:{"white-space":"pre"}}),s("3，这是服务器处理的时间，优化程序代码可以减少这里的时间")],-1),g=e("p",null,[s("  "),e("span",{style:{"white-space":"pre"}}),s("4，")],-1),B=e("p",null,[e("span",{style:{"white-space":"pre"}}),s("4.1浏览器在接收完css之前，一般是不去渲染dom的，以避免无所谓的刷新和闪烁。所以直到4.4用户才真正在页面上看到内容。")],-1),k=e("p",null,[e("span",{style:{"white-space":"pre"}}),s("4.2 浏览器的单域名并发访问数 为2，多域名下并发数没限制，可以通过定义域名别名改善")],-1),q=e("p",null,[e("span",{style:{"white-space":"pre"}}),s("4.3 浏览器加载js时会阻塞其他请求，直到加载完成。改善的话可以把js放到页面下面去加载。")],-1),v=e("p",null," ",-1),N=e("p",null,"从上面的流程可以分析出以下建议：",-1),V=e("p",null,[e("span",{style:{"white-space":"pre"}}),s("1，减少连接数（原因：并发限制，dns开销）")],-1),z=e("p",null,[e("span",{style:{"white-space":"pre"}}),s("2，将css放到 head中。（1,首先这符合w3c规范，2,应为css加载完后，遇到dom对象时就会直接显示，可以更快的显示页面。）")],-1),E=e("p",null,[e("span",{style:{"white-space":"pre"}}),s("3，将js放到页面底部，（加载js时会阻塞其他请求，这段时间页面没有反映，如果js中没有write的话应该放到底部，页面渲染完后再加载js）")],-1),R=e("p",null,[e("span",{style:{"white-space":"pre"}}),s("4，减少下载内容（网络是有速度限制的，内容越少当然加载越快）")],-1),T=e("p",null," ",-1),A=e("p",null,"针对上面4条建议给出具体做法：",-1),C=e("p",null,[e("span",{style:{"white-space":"pre"}}),s("1，使用 css sprite将小图片合并，合并css、js。使用浏览器缓存： cache-control、expires。不使用etag")],-1),D=e("p",null,[e("span",{style:{"white-space":"pre"}}),s("2、3不用说了，上面已经解释清楚了。")],-1),F=e("p",null,[e("span",{style:{"white-space":"pre"}}),s("4，采用gzip压缩，可以使用 jsmin 将js精简，使用工具将css，html精简，尽可能缩减图片。")],-1),G=e("p",null,"按照 性能黄金法则 说明： 文本内容只占所有时间的10%-20%, 这样做以后 至少能将时间缩小40%-50%。能明显改善用户体验。",-1),H=e("p",null," ",-1),I=e("p",null,"这只是一些建议参考，具体的需要你针对自己的网站进行分析，分析工具可以使用firedebug,yslow，（这两个可以集成）",-1),J=e("p",null,"yslow会直接给出你建议。",-1),K=e("p",null," ",-1),L=e("p",null," ",-1);function M(O,P){return n(),l("div",null,[o,s(),c,s(),_,s(),i,s(),h,s(),a,s(),d,s(),u,s(),r,s(),w,s(),y,s(),m,s(),j,s(),b,s(),f,s(),x,s(),g,s(),B,s(),k,s(),q,s(),v,s(),N,s(),V,s(),z,s(),E,s(),R,s(),T,s(),A,s(),C,s(),D,s(),F,s(),G,s(),H,s(),I,s(),J,s(),K,s(),L])}const S=t(p,[["render",M],["__file","2011-132.html.vue"]]);export{S as default};
