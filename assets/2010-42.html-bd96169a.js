import{_ as t,p as o,q as l,t as s,R as n}from"./framework-5866ffd3.js";const _={},d=n("p",null,null,-1),e=n("p",null,"元字符:",-1),i=n("p",null,"/b 代表着单词的开头或结尾，也就是单词的分界处.如果要精确地查找hi这个单词的话，我们应该使用/bhi/b.",-1),u=n("p",null,".是另一个元字符，匹配除了换行符以外的任意字符,*同样是元字符，它指定*前边的内容可以重复任意次以使整个表达式得到匹配。",-1),c=n("p",null," ",-1),p=n("p",null,".*连在一起就意味着任意数量的不包含换行的字符。",-1),h=n("p",null,"/d是一个新的元字符，匹配任意的数字,0/d/d-/d/d/d/d/d/d/d/d也就是中国的电话号码.为了避免那么多烦人的重复，我们也可以这样写这个表达式：0/d{2}-/d{8}。",-1),a=n("p",null,"/s匹配任意的空白符，包括空格，制表符(Tab)，换行符，中文全角空格等。/w匹配字母或数字或下划线或汉字。",-1),b=n("p",null,"/b/w{6}/b 匹配刚好6个字母/数字的单词。",-1),w=n("p",null,"字符转义：使用/来取消这些字符的特殊意义。因此，你应该使用/.和/*。当然，要查找/本身，你也得用//。",-1),r=n("p",null,"  代码     说明 ",-1),$=n("p",null,"   .  匹配除换行符以外的任意字符 ",-1),m=n("p",null,"  /w  匹配字母或数字或下划线或汉字 ",-1),x=n("p",null,"  /s  匹配任意的空白符 ",-1),g=n("p",null,"  /d  匹配数字 ",-1),q=n("p",null,"  /b  匹配单词的开始或结束 ",-1),f=n("p",null,"  ^   匹配字符串的开始 ",-1),I=n("p",null,"  $   匹配字符串的结束",-1),z=n("p",null,"重复：",-1),A=n("p",null,"常用的限定符 ",-1),T=n("p",null,"代码/语法  说明 ",-1),B=n("p",null,"   *  重复零次或更多次 ",-1),k=n("p",null,"   +  重复一次或更多次 ",-1),Z=n("p",null,"   ?  重复零次或一次 ",-1),P=n("p",null,"  {n} 重复n次 ",-1),Q=n("p",null," {n,} 重复n次或更多次 ",-1),y=n("p",null,"{n,m} 重复n到m次",-1),E=n("p",null,"要想查找数字，字母或数字，你只需要在中括号里列出它们就行了，像[aeiou]就匹配任何一个元音字母，[.?!]匹配标点符号(.或?或!)",-1),L=n("p",null,"反义：",-1),M=n("p",null," 常用的反义代码 ",-1),S=n("p",null," 代码/语法   说明 ",-1),v=n("p",null,"   /W   匹配任意不是字母，数字，下划线，汉字的字符 ",-1),H=n("p",null,"   /S   匹配任意不是空白符的字符 ",-1),N=n("p",null,"   /D   匹配任意非数字的字符 ",-1),R=n("p",null,"   /B   匹配不是单词开头或结束的位置 ",-1),V=n("p",null," [^x]   匹配除了x以外的任意字符 ",-1),W=n("p",null,"      [^aeiou]   匹配除了aeiou这几个字母以外的任意字符",-1),C=n("p",null," ",-1),D=n("p",null,"替换：",-1),U=n("p",null,"   正则表达式里的替换指的是有几种规则，如果满足其中任意一种规则都应该当成匹配，具体方法是用|把不同的规则分隔开。",-1),j=n("p",null,"   0/d{2}-/d{8}|0/d{3}-/d{7}这个表达式能匹配两种以连字号分隔的电话号码：一种是三位区号，8位本地号(如010-12345678)，一种是4位区号，7位本地号(0376-2233445)。",-1),F=n("p",null,"   /(0/d{2}/)[- ]?/d{8}|0/d{2}[- ]?/d{8}这个表达式匹配3位区号的电话号码，其中区号可以用小括号括起来，也可以不用，区号与本地号间可以用连字号或空格间隔，也可以没有间隔。你可以试试用替换|把这个表达式扩展成也支持4位区号的。",-1),G=n("p",null,"   /d{5}-/d{4}|/d{5}这个表达式用于匹配美国的邮政编码。美国邮编的规则是5位数字，或者用连字号间隔的9位数字。之所以要给出这个例子是因为它能说明一个问题：使用替换时，顺序是很重要的。如果你把它改成/d{5}|/d{5}-/d{4}的话，那么就只会匹配5位的邮编(以及9位邮编的前5位)。原因是匹配替换时，将会从左到右地测试每个分枝条件，如果满足了某个分枝的话，就不会去管其它的替换条件了。",-1),J=n("p",null,"分组：",-1),K=n("p",null,"如果想要重复一个字符串又该怎么办？你可以用小括号来指定子表达式(也叫做分组)，然后你就可以指定这个子表达式的重复次数了。",-1),O=n("p",null,"     (/d{1,3}/.){3}/d{1,3}是一个简单的IP地址匹配表达式。要理解这个表达式，请按下列顺序分析它：/d{1,3}匹配1到3位的数字，(/d{1,3}/.}{3}匹配三位数字加上一个英文句号(这个整体也就是这个分组)重复3次，最后再加上一个一到三位的数字(/d{1,3})。不幸的是，它也将匹配256.300.888.999这种不可能存在的IP地址(IP地址中每个数字都不能大于255)。如果能使用算术比较的话，或许能简单地解决这个问题，但是正则表达式中并不提供关于数学的任何功能，所以只能使用冗长的分组，选择，字符类来描述一个正确的IP地址：((2[0-4]/d|25[0-5]|[01]?/d/d?)/.){3}(2[0-4]/d|25[0-5]|[01]?/d/d?)。",-1),X=n("p",null,"后向引用：",-1),Y=n("p",null,"后向引用用于重复搜索前面某个分组匹配的文本。例如，/1代表分组1匹配的文本。难以理解？请看示例：",-1),nn=n("p",null,"/b(/w+)/b/s+/1/b可以用来匹配重复的单词，像go go, kitty kitty。首先是一个单词，也就是单词开始处和结束处之间的多于一个的字母或数字(/b(/w+)/b)，然后是1个或几个空白符(/s+，最后是前面匹配的那个单词(/1)。",-1),sn=n("p",null,"懒惰限定符 ",-1),tn=n("p",null,"*? 重复任意次，但尽可能少重复 ",-1),on=n("p",null,"+? 重复1次或更多次，但尽可能少重复 ",-1),ln=n("p",null,"?? 重复0次或1次，但尽可能少重复 ",-1),_n=n("p",null,"{n,m}? 重复n到m次，但尽可能少重复 ",-1),dn=n("p",null,"{n,}? 重复n次以上，但尽可能少重复",-1),en=n("p",null,"位置指定:",-1),un=n("p",null," ",-1),cn=n("p",null,"接下来的四个用于查找在某些内容(但并不包括这些内容)之前或之后的东西，也就是说它们用于指定一个位置，就像/b,^,$那样，因此它们也被称为零宽断言。最好还是拿例子来说明吧：",-1),pn=n("p",null,"(?=exp)也叫零宽先行断言，它匹配文本中的某些位置，这些位置的后面能匹配给定的后缀exp。比如/b/w+(?=ing/b)，匹配以ing结尾的单词的前面部分(除了ing以外的部分)，如果在查找I'm singing while you're dancing.时，它会匹配sing和danc。",-1),hn=n("p",null,"(?<=exp)也叫零宽后行断言，它匹配文本中的某些位置，这些位置的前面能给定的前缀匹配exp。比如(?<=/bre)/w+/b会匹配以re开头的单词的后半部分(除了re以外的部分)，例如在查找reading a book时，它匹配ading。",-1),an=n("p",null,"假如你想要给一个很长的数字中每三位间加一个逗号(当然是从右边加起了)，你可以这样查找需要在前面和里面添加逗号的部分：((?<=/d)/d{3})*/b。请仔细分析这个表达式，它可能不像你第一眼看出来的那么简单。",-1),bn=n("p",null,"下面这个例子同时使用了前缀和后缀：(?<=/s)/d+(?=/s)匹配以空白符间隔的数字(再次强调，不包括这些空白符)。",-1),wn=n("p",null,"负向位置指定:",-1),rn=n("p",null," ",-1),$n=n("p",null,"前面我们提到过怎么查找不是某个字符或不在某个字符类里的字符的方法(反义)。但是如果我们只是想要确保某个字符没有出现，但并不想去匹配它时怎么办？例如，如果我们想查找这样的单词--它里面出现了字母q,但是q后面跟的不是字母u,我们可以尝试这样：",-1),mn=n("p",null,"/b/w*q[^u]/w*/b匹配包含后面不是字母u的字母q的单词。但是如果多做测试(或者你思维足够敏锐，直接就观察出来了)，你会发现，如果q出现在单词的结尾的话，像Iraq,Benq，这个表达式就会出错。这是因为[^u]总是匹配一个字符，所以如果q是单词的最后一个字符的话，后面的[^u]将会匹配q后面的单词分隔符(可能是空格，或者是句号或其它的什么)，后面的/w+/b将会匹配下一个单词，于是/b/w*q[^u]/w*/b就能匹配整个Iraq fighting。负向位置指定能解决这样的问题，因为它只匹配一个位置，并不消费任何字符。现在，我们可以这样来解决这个问题：/b/w*q(?!u)/w*/b。",-1),xn=n("p",null,"零宽负向先行断言(?!exp)，只会匹配后缀exp不存在的位置。/d{3}(?!/d)匹配三位数字，而且这三位数字的后面不能是数字。",-1),gn=n("p",null,"同理，我们可以用(?<!exp),零宽负向后行断言来查找前缀exp不存在的位置：(?<![a-z])/d{7}匹配前面不是小写字母的七位数字(实验时发现错误？注意你的“区分大小写”先项是否选中)。",-1),qn=n("p",null,"一个更复杂的例子：(?<=<(/w+)>).*(?=<///1>)匹配不包含属性的简单HTML标签内里的内容。(<?(/w+)>)指定了这样的前缀：被尖括号括起来的单词(比如可能是<b>)，然后是.*(任意的字符串),最后是一个后缀(?=<///1>)。注意后缀里的//，它用到了前面提过的字符转义；/1则是一个反向引用，引用的正是捕获的第一组，前面的(/w+)匹配的内容，这样如果前缀实际上是<b>的话，后缀就是</b>了。整个表达式匹配的是<b>和</b>之间的内容(再次提醒，不包括前缀和后缀本身)。",-1),fn=n("p",null,"注释:",-1),In=n("p",null,"小括号的另一种用途是能过语法(?#comment)来包含注释。例如：2[0-4]/d(?#200-249)|25[0-5](?#250-255)|[01]?/d/d?(?#0-199)。",-1),zn=n("p",null,"要包含注释的话，最好是启用“忽略模式里的空白符”选项，这样在编写表达式时能任意的添加空格，Tab，换行，而实际使用时这些都将被忽略。启用这个选项后，在#后面到这一行结束的所有文本都将被当成注释忽略掉。",-1),An=n("p",null,"例如，我们可以前面的一个表达式写成这样：",-1),Tn=n("p",null,"      (?<=    # 查找前缀，但不包含它",-1),Bn=n("p",null,"      <(/w+)> # 查找尖括号括起来的字母或数字(标签)",-1),kn=n("p",null,"      )       # 前缀结束",-1),Zn=n("p",null,"      .*      # 匹配任意文本",-1),Pn=n("p",null,"      (?=     # 查找后缀，但不包含它",-1),Qn=n("p",null,'      <///1>  # 查找尖括号括起来的内容：前面是一个"/"，后面是先前捕获的标签',-1),yn=n("p",null,"      )       # 后缀结束",-1),En=n("p",null," ",-1),Ln=n("p",null,"贪婪与懒惰:",-1),Mn=n("p",null,"当正则表达式中包含能接受重复的限定符(指定数量的代码，例如*,{5,12}等)时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能多的字符。考虑这个表达式：a.*b，它将会匹配最长的以a开始，以b结束的字符串。如果用它来搜索aabab的话，它会匹配整个字符串aabab。这被称为贪婪匹配。",-1),Sn=n("p",null,"有时，我们更需要懒惰匹配，也就是匹配尽可能少的字符。前面给出的限定符都可以被转化为懒惰匹配模式，只要在它后面加上一个问号?。这样.*?就意味着匹配任意数量的重复，但是在能使整个匹配成功的前提下使用最少的重复。现在看看懒惰版的例子吧：",-1),vn=n("p",null,"a.*?b匹配最短的，以a开始，以b结束的字符串。如果把它应用于aabab的话，它会匹配aab和ab（为什么第一个匹配是aab而不是ab？简单地说，最先开始的区配最有最大的优先权——The Match That Begins Earliest Wins）。",-1),Hn=n("p",null,"表5.懒惰限定符 *? 重复任意次，但尽可能少重复 ",-1),Nn=n("p",null,"+? 重复1次或更多次，但尽可能少重复 ",-1),Rn=n("p",null,"?? 重复0次或1次，但尽可能少重复 ",-1),Vn=n("p",null,"{n,m}? 重复n到m次，但尽可能少重复 ",-1),Wn=n("p",null,"{n,}? 重复n次以上，但尽可能少重复 ",-1),Cn=n("p",null,"-------------------------------------------------------",-1),Dn=n("p",null,"下面是一些常用的正则表达式:",-1),Un=n("p",null,"匹配中文字符的正则表达式： [/u4e00-/u9fa5]",-1),jn=n("p",null,"评注：匹配中文还真是个头疼的事，有了这个表达式就好办了",-1),Fn=n("p",null,"匹配双字节字符(包括汉字在内)：[^/x00-/xff]",-1),Gn=n("p",null,"评注：可以用来计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）",-1),Jn=n("p",null,"匹配空白行的正则表达式：/n/s*/r",-1),Kn=n("p",null,"评注：可以用来删除空白行",-1),On=n("p",null,"匹配HTML标记的正则表达式：<(/S*?)[^>]*>.*?<//1>|<.*? />",-1),Xn=n("p",null,"评注：网上流传的版本太糟糕，上面这个也仅仅能匹配部分，对于复杂的嵌套标记依旧无能为力",-1),Yn=n("p",null,"匹配首尾空白字符的正则表达式：^/s*|/s*$",-1),ns=n("p",null,"评注：可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式",-1),ss=n("p",null,"匹配Email地址的正则表达式：/w+([-+.]/w+)*@/w+([-.]/w+)*/./w+([-.]/w+)*",-1),ts=n("p",null,"评注：表单验证时很实用",-1),os=n("p",null,"匹配网址URL的正则表达式：[a-zA-z]+://[^/s]*",-1),ls=n("p",null,"评注：网上流传的版本功能很有限，上面这个基本可以满足需求",-1),_s=n("p",null,"匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$",-1),ds=n("p",null,"评注：表单验证时很实用",-1),es=n("p",null,"匹配国内电话号码：/d{3}-/d{8}|/d{4}-/d{7}",-1),is=n("p",null,"评注：匹配形式如 0511-4405222 或 021-87888822",-1),us=n("p",null,"匹配腾讯QQ号：[1-9][0-9]{4,}",-1),cs=n("p",null,"评注：腾讯QQ号从10000开始",-1),ps=n("p",null,"匹配中国邮政编码：[1-9]/d{5}(?!/d)",-1),hs=n("p",null,"评注：中国邮政编码为6位数字",-1),as=n("p",null,"匹配身份证：/d{15}|/d{18}",-1),bs=n("p",null,"评注：中国的身份证为15位或18位",-1),ws=n("p",null,"匹配ip地址：/d+/./d+/./d+/./d+",-1),rs=n("p",null,"评注：提取ip地址时有用",-1),$s=n("p",null,"匹配特定数字：",-1),ms=n("p",null,"^[1-9]/d*$ //匹配正整数",-1),xs=n("p",null,"^-[1-9]/d*$ //匹配负整数",-1),gs=n("p",null,"^-?[1-9]/d*$ //匹配整数",-1),qs=n("p",null,"^[1-9]/d*|0$ //匹配非负整数（正整数 + 0）",-1),fs=n("p",null,"^-[1-9]/d*|0$ //匹配非正整数（负整数 + 0）",-1),Is=n("p",null,"^[1-9]/d*/./d*|0/./d*[1-9]/d*$ //匹配正浮点数",-1),zs=n("p",null,"^-([1-9]/d*/./d*|0/./d*[1-9]/d*)$ //匹配负浮点数",-1),As=n("p",null,"^-?([1-9]/d*/./d*|0/./d*[1-9]/d*|0?/.0+|0)$ //匹配浮点数",-1),Ts=n("p",null,"^[1-9]/d*/./d*|0/./d*[1-9]/d*|0?/.0+|0$ //匹配非负浮点数（正浮点数 + 0）",-1),Bs=n("p",null,"^(-([1-9]/d*/./d*|0/./d*[1-9]/d*))|0?/.0+|0$ //匹配非正浮点数（负浮点数 + 0）",-1),ks=n("p",null,"评注：处理大量数据时有用，具体应用时注意修正",-1),Zs=n("p",null,"匹配特定字符串：",-1),Ps=n("p",null,"^[A-Za-z]+$ //匹配由26个英文字母组成的字符串",-1),Qs=n("p",null,"^[A-Z]+$ //匹配由26个英文字母的大写组成的字符串",-1),ys=n("p",null,"^[a-z]+$ //匹配由26个英文字母的小写组成的字符串",-1),Es=n("p",null,"^[A-Za-z0-9]+$ //匹配由数字和26个英文字母组成的字符串",-1),Ls=n("p",null,"^/w+$ //匹配由数字、26个英文字母或者下划线组成的字符串",-1),Ms=n("p",null,"评注：最基本也是最常用的一些表达式",-1);function Ss(vs,Hs){return o(),l("div",null,[d,s(),e,s(),i,s(),u,s(),c,s(),p,s(),h,s(),a,s(),b,s(),w,s(),r,s(),$,s(),m,s(),x,s(),g,s(),q,s(),f,s(),I,s(),z,s(),A,s(),T,s(),B,s(),k,s(),Z,s(),P,s(),Q,s(),y,s(),E,s(),L,s(),M,s(),S,s(),v,s(),H,s(),N,s(),R,s(),V,s(),W,s(),C,s(),D,s(),U,s(),j,s(),F,s(),G,s(),J,s(),K,s(),O,s(),X,s(),Y,s(),nn,s(),sn,s(),tn,s(),on,s(),ln,s(),_n,s(),dn,s(),en,s(),un,s(),cn,s(),pn,s(),hn,s(),an,s(),bn,s(),wn,s(),rn,s(),$n,s(),mn,s(),xn,s(),gn,s(),qn,s(),fn,s(),In,s(),zn,s(),An,s(),Tn,s(),Bn,s(),kn,s(),Zn,s(),Pn,s(),Qn,s(),yn,s(),En,s(),Ln,s(),Mn,s(),Sn,s(),vn,s(),Hn,s(),Nn,s(),Rn,s(),Vn,s(),Wn,s(),Cn,s(),Dn,s(),Un,s(),jn,s(),Fn,s(),Gn,s(),Jn,s(),Kn,s(),On,s(),Xn,s(),Yn,s(),ns,s(),ss,s(),ts,s(),os,s(),ls,s(),_s,s(),ds,s(),es,s(),is,s(),us,s(),cs,s(),ps,s(),hs,s(),as,s(),bs,s(),ws,s(),rs,s(),$s,s(),ms,s(),xs,s(),gs,s(),qs,s(),fs,s(),Is,s(),zs,s(),As,s(),Ts,s(),Bs,s(),ks,s(),Zs,s(),Ps,s(),Qs,s(),ys,s(),Es,s(),Ls,s(),Ms])}const Rs=t(_,[["render",Ss],["__file","2010-42.html.vue"]]);export{Rs as default};
