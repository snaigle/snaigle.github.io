import{_ as l,p as r,q as o,t as e,R as t,a1 as p}from"./framework-5866ffd3.js";const i={},u=t("h3",null,[e("freemarker 官方文档 "),t("span",null,[t("a",{href:"http://freemarker.sourceforge.net/docs/index.html"},"http://freemarker.sourceforge.net/docs/index.html")])],-1),a=t("h3",null,[t("br")],-1),s=p('<h3>（1）模板 + 数据模型 = 输出 </h3><p>FreeMarker 基于设计者和程序员是具有不同专业技能的不同个体的观念他们是分工劳动的：设计者专注于表示——创建HTML文件、图片、Web页面的其它可视化方面；程 序员创建系统，生成设计页面要显示的数据。经常会遇到的问题是：在Web页面（或其它类型的文档）中显示的信息在设计页面时是无效的，是基于动态数据的。 在这里，你可以在HTML（或其它要输出的文本）中加入一些特定指令，FreeMarker会在输出页面给最终用户时，用适当的数据替代这些代码。 </p><p>下面是一个例子： </p><pre> &lt;html&gt;\n    &lt;head&gt;  \n        &lt;title&gt;Welcome!&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;  \n        &lt;h1&gt;Welcome ${user}!&lt;/h1&gt;  \n        &lt;p&gt;Our latest product:  &lt;/p&gt;\n        &lt;a href=&quot;${latestProduct.url}&quot;&gt;${latestProduct.name}&lt;/a&gt;!\n    &lt;/body&gt;\n&lt;/html&gt;  \n</pre><p> 这个例子是在简单的HTML中加入了一些由${…}包围的特定代码，这些特定代码是FreeMarker的指令，而包含FreeMarker的指令的文件 就称为模板（Template）。至于user、latestProduct.url和latestProduct.name来自于数据模型（data model）。数据模型由程序员编程来创建，向模板提供变化的信息，这些信息来自于数据库、文件，甚至于在程序中直接生成。模板设计者不关心数据从那儿 来，只知道使用已经建立的数据模型。 </p><p>下面是一个可能的数据模型： </p><pre>(root)  |  +- user = &quot;Big Joe&quot;  |  +- latestProduct      |      +- url = &quot;products/greenmouse.html&quot;      |      +- name = &quot;green mouse&quot;</pre><p> 数据模型类似于计算机的文件系统，latestProduct可以看作是目录。 </p><h3 id="section-FreeMarker_E8_AE_BE_E8_AE_A1_E6_8C_87_E5_8D_97-2_E6_95_B0_E6_8D_AE_E6_A8_A1_E5_9E_8B">2、数据模型 </h3><h4 id="section-FreeMarker_E8_AE_BE_E8_AE_A1_E6_8C_87_E5_8D_97-1_E5_9F_BA_E7_A1_80">（1）基础 </h4><p>在快速入门中介绍了在模板中使用的三种基本对象类型：scalars、hashes 和sequences，其实还可以有其它更多的能力： </p><ul><li>scalars：存储单值 </li></ul><ul><li>hashes：充当其它对象的容器，每个都关联一个唯一的查询名字 </li></ul><ul><li>sequences：充当其它对象的容器，按次序访问 </li></ul><ul><li>方法：通过传递的参数进行计算，以新对象返回结果 </li></ul><ul><li>用户自定义FTL标记：宏和变换器 </li></ul><p>通常每个变量只具有上述的一种能力，但一个变量可以具有多个上述能力，如下面的例子： </p><pre>(root) | +- mouse = &quot;Yerri&quot;     |     +- age = 12     |     +- color = &quot;brown&quot;&gt;  </pre><p> mouse既是scalars又是hashes，将上面的数据模型合并到下面的模板： </p><pre>${mouse}       &lt;#-- use mouse as scalar --&gt;${mouse.age}   &lt;#-- use mouse as hash --&gt;${mouse.color} &lt;#-- use mouse as hash --&gt;  </pre><p> 输出结果是： </p><pre>Yerri12brown  </pre><h4 id="section-FreeMarker_E8_AE_BE_E8_AE_A1_E6_8C_87_E5_8D_97-2Scalar_E5_8F_98_E9_87_8F">（2）Scalar变量 </h4><p>Scalar变量存储单值，可以是： </p><ul><li>字符串：简单文本，在模板中使用引号（单引号或双引号）括起 </li></ul><ul><li>数字：在模板中直接使用数字值 </li></ul><ul><li>日期：存储日期/时间相关的数据，可以是日期、时间或日期-时间（Timestamp）；通常情况，日期值由程序员加到数据模型中，设计者只需要显示它们 </li></ul><ul><li>布尔值：true或false，通常在&lt;#if …&gt;标记中使用 </li></ul><h4 id="section-FreeMarker_E8_AE_BE_E8_AE_A1_E6_8C_87_E5_8D_97-3hashessequences_E5_92_8C_E9_9B_86_E5_90_88">（3）hashes 、sequences和集合 </h4><p>有些变量不包含任何可显示的内容，而是作为容器包含其它变量，者有两种类型： </p><ul><li>hashes：具有一个唯一的查询名字和它包含的每个变量相关联 </li></ul><ul><li>sequences：使用数字和它包含的每个变量相关联，索引值从0开始 </li></ul><p>集合变量通常类似sequences，除非无法访问它的大小和不能使用索引来获得它的子变量；集合可以看作只能由&lt;#list …&gt;指令使用的受限sequences </p><h4 id="section-FreeMarker_E8_AE_BE_E8_AE_A1_E6_8C_87_E5_8D_97-4_E6_96_B9_E6_B3_95">（4）方法 </h4><p>方法变量通常是基于给出的参数计算值。 </p><p>下面的例子假设程序员已经将方法变量avg放到数据模型中，用来计算数字平均值： </p><pre>The average of 3 and 5 is: ${avg(3, 5)}The average of 6 and 10 and 20 is: ${avg(6, 10, 20)}The average of the price of python and elephant is:     ${avg(animals.python.price, animals.elephant.price)}</pre><h4 id="section-FreeMarker_E8_AE_BE_E8_AE_A1_E6_8C_87_E5_8D_97-5_E5_AE_8F_E5_92_8C_E5_8F_98_E6_8D_A2_E5_99_A8">（5）宏和变换器 </h4><p>宏和变换器变量是用户自定义指令（自定义FTL标记），会在后面讲述这些高级特性 </p><h4 id="section-FreeMarker_E8_AE_BE_E8_AE_A1_E6_8C_87_E5_8D_97-6_E8_8A_82_E7_82_B9">（6）节点 </h4><p>节点变量表示为树型结构中的一个节点，通常在XML处理中使用，会在后面的专门章节中讲 </p><h3 id="section-FreeMarker_E8_AE_BE_E8_AE_A1_E6_8C_87_E5_8D_97-3_E6_A8_A1_E6_9D_BF">3、模板 </h3><h4 id="section-FreeMarker_E8_AE_BE_E8_AE_A1_E6_8C_87_E5_8D_97-1_E6_95_B4_E4_BD_93_E7_BB_93_E6_9E_84">（1）整体结构 </h4><p>模板使用FTL（FreeMarker模板语言）编写，是下面各部分的一个组合： </p><ul><li>文本：直接输出 </li><li>Interpolation：由${和}，或#{和}来限定，计算值替代输出 </li><li>FTL标记：FreeMarker指令，和HTML标记类似，名字前加#予以区分，不会输出 </li><li>注释：由&lt;#--和--&gt;限定，不会输出 </li></ul><p>下面是以一个具体模板例子： </p><pre>&lt;html&gt;&lt;head&gt;  &lt;title&gt;Welcome!&lt;/title&gt;&lt;/head&gt;&lt;body&gt;  &lt;#-- Greet the user with his/her name --&gt;  &lt;h1&gt;Welcome ${user}!&lt;/h1&gt;  &lt;p&gt;We have these animals:  &lt;ul&gt;  &lt;#list animals as being&gt;    &lt;li&gt;${being.name} for ${being.price} Euros  &lt;/#list&gt;  &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;  </pre><p>注意事项： </p><ul><li>FTL区分大小写，所以list是正确的FTL指令，而List不是；${name}和${NAME}是不同的 </li></ul><ul><li>Interpolation只能在文本中使用 </li></ul><ul><li>FTL标记不能位于另一个FTL标记内部，例如： </li></ul><pre>&lt;#if &lt;#include &#39;foo&#39;&gt;=&#39;bar&#39;&gt;...&lt;/if&gt;</pre><ul><li>注释可以位于FTL标记和Interpolation内部，如下面的例子： </li></ul><pre>&lt;h1&gt;Welcome ${user &lt;#-- The name of user --&gt;}!&lt;/h1&gt;&lt;p&gt;We have these animals:&lt;ul&gt;&lt;#list &lt;#-- some comment... --&gt; animals as &lt;#-- again... --&gt; being&gt;...  </pre><ul><li>余的空白字符会在模板输出时移除 </li></ul><h4 id="section-FreeMarker_E8_AE_BE_E8_AE_A1_E6_8C_87_E5_8D_97-2_E6_8C_87_E4_BB_A4">（2）指令 </h4><p>在FreeMarker中，使用FTL标记引用指令。有三种FTL标记，这和HTML标记是类似的： </p><ul><li>开始标记：&lt;#directivename parameters&gt; </li></ul><ul><li>结束标记：&lt;/#directivename&gt; </li></ul><ul><li>空内容指令标记：&lt;#directivename parameters/&gt; </li></ul><p>有两种类型的指令：预定义指令和用户定义指令。 </p><p>用户定义指令要使用@替换#，如&lt;@mydirective&gt;...&lt;/@mydirective&gt;（会在后面讲述）。 </p><p>FTL标记不能够交叉，而应该正确的嵌套，如下面的代码是错误的： </p><pre>&lt;ul&gt;&lt;#list animals as being&gt;  &lt;li&gt;${being.name} for ${being.price} Euros  &lt;#if use = &quot;Big Joe&quot;&gt;     (except for you)&lt;/#list&gt;&lt;/#if&gt; &lt;#-- WRONG! --&gt;&lt;/ul&gt;  </pre><p> 如果使用不存在的指令，FreeMarker不会使用模板输出，而是产生一个错误消息。 </p><p>FreeMarker会忽略FTL标记中的空白字符，如下面的例子： </p><pre>&lt;#list  animals       as     being&gt;${being.name} for ${being.price} Euros&lt;/#list    &gt;  </pre><p> 但是，&lt;、&lt;/和指令之间不允许有空白字符。 </p><h4 id="section-FreeMarker_E8_AE_BE_E8_AE_A1_E6_8C_87_E5_8D_97-3_E8_A1_A8_E8_BE_BE_E5_BC_8F">（3）表达式 </h4><p><strong>直接指定值</strong></p><ul><li>字符串 </li></ul><p> 使用单引号或双引号限定 </p><p>如果包含特殊字符需要转义，如下面的例子： </p><pre>${&quot;It&#39;s \\&quot;quoted\\&quot; andthis is a backslash: \\\\&quot;}${&#39;It\\&#39;s &quot;quoted&quot; andthis is a backslash: \\\\&#39;} </pre><p> 输出结果是： </p><pre>It&#39;s &quot;quoted&quot; andthis is a backslash: \\It&#39;s &quot;quoted&quot; andthis is a backslash: \\ </pre><p> 下面是支持的转义序列： </p><table class="wikitable" border="1"><tbody><tr><th>转义序列 </th><th>含义 </th></tr><tr><td>\\&quot; </td><td>双引号(u0022) </td></tr><tr><td>\\&#39; </td><td>单引号(u0027) </td></tr><tr><td><br></td><td>反斜杠(u005C) </td></tr><tr><td>\\n </td><td>换行(u000A) </td></tr><tr><td>\\r </td><td>Return (u000D) </td></tr><tr><td>\\t </td><td>Tab (u0009) </td></tr><tr><td>\\b </td><td>Backspace (u0008) </td></tr><tr><td>\\f </td><td>Form feed (u000C) </td></tr><tr><td>\\l </td><td>&lt; </td></tr><tr><td>\\g </td><td>&gt; </td></tr><tr><td>\\a </td><td>&amp; </td></tr><tr><td>\\{ </td><td>{ </td></tr><tr><td>\\xCode </td><td>4位16进制Unicode代码 </td></tr></tbody></table><p>有一类特殊的字符串称为raw字符串，被认为是纯文本，其中的\\和{等不具有特殊含义，该类字符串在引号前面加r，下面是一个例子： </p><pre>${r&quot;${foo}&quot;}${r&quot;C:\\foo\\bar&quot;}  </pre><p> 输出的结果是： </p><pre>${foo}C:\\foo\\bar  </pre><ul><li>数字 </li></ul><p>直接输入，不需要引号 </p><p>精度数字使用“.”分隔，不能使用分组符号 </p><p>目前版本不支持科学计数法，所以“1E3”是错误的 </p><p>不能省略小数点前面的0，所以“.5”是错误的 </p><p>数字8、+8、08和8.00都是相同的 </p><ul><li>布尔值 </li></ul><p>true和false，不使用引号 </p><ul><li>序列 </li></ul><p>由逗号分隔的子变量列表，由方括号限定，下面是一个例子： </p><pre>&lt;#list [&quot;winter&quot;, &quot;spring&quot;, &quot;summer&quot;, &quot;autumn&quot;] as x&gt;${x}&lt;/#list&gt; </pre><p> 输出的结果是： </p><pre>winterspringsummerautumn</pre><p> 列表的项目是表达式，所以可以有下面的例子： </p><pre>[2 + 2, [1, 2, 3, 4], &quot;whatnot&quot;]</pre><p> 可以使用数字范围定义数字序列，例如2..5等同于[2, 3, 4, 5]，但是更有效率，注意数字范围没有方括号 </p><p>可以定义反递增的数字范围，如5..2 </p><ul><li>散列（hash） </li></ul><p> 由逗号分隔的键/值列表，由大括号限定，键和值之间用冒号分隔，下面是一个例子： </p><pre>{&quot;name&quot;:&quot;green mouse&quot;, &quot;price&quot;:150}</pre><p> 键和值都是表达式，但是键必须是字符串 </p><p><strong>获取变量</strong></p><ul><li>顶层变量： ${variable}，变量名只能是字母、数字、下划线、$、@和#的组合，且不能以数字开头 </li></ul><ul><li>从散列中获取数据 </li></ul><p>可以使用点语法或方括号语法，假设有下面的数据模型： </p><pre>(root) | +- book |   | |   +- title = &quot;Breeding green mouses&quot; |   | |   +- author |       | |       +- name = &quot;Julia Smith&quot; |       | |       +- info = &quot;Biologist, 1923-1985, Canada&quot; | +- test = &quot;title&quot; \n</pre><p> 下面都是等价的： </p><pre>book.author.namebook[&quot;author&quot;].namebook.author.[&quot;name&quot;]book[&quot;author&quot;][&quot;name&quot;]</pre><p> 使用点语法，变量名字有顶层变量一样的限制，但方括号语法没有该限制，因为名字是任意表达式的结果 </p><ul><li>从序列获得数据：和散列的方括号语法语法一样，只是方括号中的表达式值必须是数字；注意：第一个项目的索引是0 </li></ul><p>序列片断：使用[startIndex..endIndex]语法，从序列中获得序列片断（也是序列）；startIndex和endIndex是结果为数字的表达式 </p><ul><li>特殊变量：FreeMarker内定义变量，使用.variablename语法访问 </li></ul><p><strong>字符串操作 </strong></p><ul><li>Interpolation（或连接操作） </li></ul><p>可以使用${..}（或#{..}）在文本部分插入表达式的值，例如： </p><pre>${&quot;Hello ${user}!&quot;}${&quot;${user}${user}${user}${user}&quot;}  </pre><p> 可以使用+操作符获得同样的结果 </p><pre>${&quot;Hello &quot; + user + &quot;!&quot;}${user + user + user + user}</pre><p> ${..}只能用于文本部分，下面的代码是错误的： </p><pre>&lt;#if ${isBig}&gt;Wow!&lt;/#if&gt;&lt;#if &quot;${isBig}&quot;&gt;Wow!&lt;/#if&gt;</pre><p> 应该写成： </p><pre>&lt;#if isBig&gt;Wow!&lt;/#if&gt;</pre><ul><li>子串 </li></ul><p>例子（假设user的值为“Big Joe”）： </p><pre>${user[0]}${user[4]}${user[1..4]}</pre><p> 结果是（注意第一个字符的索引是0）： </p><pre>BJig J </pre><p><strong>序列操作 </strong></p><ul><li>连接操作：和字符串一样，使用+，下面是一个例子： </li></ul><pre>&lt;#list [&quot;Joe&quot;, &quot;Fred&quot;] + [&quot;Julia&quot;, &quot;Kate&quot;] as user&gt;- ${user}&lt;/#list&gt;</pre><p> 输出结果是： </p><pre>- Joe- Fred- Julia- Kate</pre><p><strong>散列操作 </strong></p><ul><li>连接操作：和字符串一样，使用+，如果具有相同的key，右边的值替代左边的值，例如： </li></ul><pre>&lt;#assign ages = {&quot;Joe&quot;:23, &quot;Fred&quot;:25} + {&quot;Joe&quot;:30, &quot;Julia&quot;:18}&gt;- Joe is ${ages.Joe}- Fred is ${ages.Fred}- Julia is ${ages.Julia}  </pre><p> 输出结果是： </p><pre>- Joe is 30- Fred is 25- Julia is 18  </pre><p><strong>算术运算 </strong></p><ul><li>＋、－、×、／、％，下面是一个例子： </li></ul><pre>${x * x - 100}${x / 2}${12 % 10}</pre><p> 输出结果是（假设x为5）： </p><pre>-752.52  </pre><p> 操作符两边必须是数字，因此下面的代码是错误的： </p><pre>${3 * &quot;5&quot;} &lt;#-- WRONG! --&gt;  </pre><p> 使用+操作符时，如果一边是数字，一边是字符串，就会自动将数字转换为字符串，例如： </p><pre>${3 + &quot;5&quot;}  </pre><p> 输出结果是： </p><pre>35</pre><p> 使用内建的int（后面讲述）获得整数部分，例如： </p><pre>${(x/2)?int}${1.1?int}${1.999?int}${-1.1?int}${-1.999?int}</pre><p> 输出结果是（假设x为5）： </p><pre>211-1-1</pre><ul><li>比较操作符 </li></ul><p>使用=（或==，完全相等）测试两个值是否相等，使用!= 测试两个值是否不相等 </p><p>=和!=两边必须是相同类型的值，否则会产生错误，例如&lt;#if 1 = &quot;1&quot;&gt;会引起错误 </p><p>Freemarker是精确比较，所以对&quot;x&quot;、&quot;x &quot;和&quot;X&quot;是不相等的 </p><p>对数字和日期可以使用&lt;、&lt;=、&gt;和&gt;=，但不能用于字符串 </p><p>由于Freemarker会将&gt;解释成FTL标记的结束字符，所以对于&gt;和&gt;=可以使用括号来避免这种情况，例如&lt;#if (x &gt; y)&gt; </p><p>另一种替代的方法是，使用lt、lte、gt和gte来替代&lt;、&lt;=、&gt;和&gt;= </p><ul><li>逻辑操作符 </li></ul><p>&amp;&amp;（and）、||（or）、!（not），只能用于布尔值，否则会产生错误 </p><p>例子： </p><pre>&lt;#if x &lt; 12 &amp;&amp; color = &quot;green&quot;&gt;  We have less than 12 things, and they are green.&lt;/#if&gt;&lt;#if !hot&gt; &lt;#-- here hot must be a boolean --&gt;  It&#39;s not hot.&lt;/#if&gt;  </pre><ul><li>内建函数 </li></ul><p>内建函数的用法类似访问散列的子变量，只是使用“?”替代“.”，下面列出常用的一些函数 </p><ul><li><ul><li>字符串使用的： </li></ul></li></ul><p>html：对字符串进行HTML编码 </p><p>cap_first：使字符串第一个字母大写 </p><p>lower_case：将字符串转换成小写 </p><p>upper_case：将字符串转换成大写 </p><p>trim：去掉字符串前后的空白字符 </p><ul><li><ul><li>序列使用的： </li></ul></li></ul><p>size：获得序列中元素的数目 </p><ul><li><ul><li>数字使用的： </li></ul></li></ul><p>int：取得数字的整数部分（如-1.9?int的结果是-1） </p><p>例子（假设test保存字符串&quot;Tom &amp; Jerry&quot;）： </p><pre>${test?html}${test?upper_case?html}</pre><p> 输出结果是： </p><pre>Tom &amp;amp; JerryTOM &amp;amp; JERRY  </pre><ul><li>操作符优先顺序 </li></ul><table class="wikitable" border="1"><tbody><tr><th>操作符组 </th><th>操作符 </th></tr><tr><td>后缀 </td><td>[subvarName] [subStringRange] . (methodParams) </td></tr><tr><td>一元 </td><td>+expr、-expr、! </td></tr><tr><td>内建 </td><td>? </td></tr><tr><td>乘法 </td><td>*、 / 、% </td></tr><tr><td>加法 </td><td>+、- </td></tr><tr><td>关系 </td><td>&lt;、&gt;、&lt;=、&gt;=（lt、lte、gt、gte） </td></tr><tr><td>相等 </td><td>==（=）、!= </td></tr><tr><td>逻辑and </td><td>&amp;&amp; </td></tr><tr><td>逻辑or </td><td>双竖线</td></tr><tr><td>数字范围 </td><td>.. </td></tr></tbody></table><h4 id="section-FreeMarker_E8_AE_BE_E8_AE_A1_E6_8C_87_E5_8D_97-4Interpolation">（4）Interpolation </h4><p>Interpolation有两种类型： </p><ol><li>通用Interpolation：${expr} </li></ol><ol><li>数字Interpolation：#{expr}或#{expr; format} </li></ol><p>注意：Interpolation只能用于文本部分 </p><ul><li>通用Interpolation </li></ul><p>插入字符串值：直接输出表达式结果 </p><p>插入数字值：根据缺省格式（由#setting指令设置）将表达式结果转换成文本输出；可以使用内建函数string格式化单个Interpolation，下面是一个例子： </p><pre>&lt;#setting number_format=&quot;currency&quot;/&gt;&lt;#assign answer=42/&gt;${answer}${answer?string}  &lt;#-- the same as ${answer} --&gt;${answer?string.number}${answer?string.currency}${answer?string.percent} </pre><p> 输出结果是： </p><pre>$42.00$42.0042$42.004,200%</pre><p> 插入日期值：根据缺省格式（由#setting指令设置）将表达式结果转换成文本输出；可以使用内建函数string格式化单个Interpolation，下面是一个使用格式模式的例子： </p><pre>${lastUpdated?string(&quot;yyyy-MM-dd HH:mm:ss zzzz&quot;)}${lastUpdated?string(&quot;EEE, MMM d, &#39;&#39;yy&quot;)}${lastUpdated?string(&quot;EEEE, MMMM dd, yyyy, hh:mm:ss a &#39;(&#39;zzz&#39;)&#39;&quot;)}  </pre><p> 输出的结果类似下面的格式： </p><pre>2003-04-08 21:24:44 Pacific Daylight TimeTue, Apr 8, &#39;03Tuesday, April 08, 2003, 09:24:44 PM (PDT)</pre><p> 插入布尔值：根据缺省格式（由#setting指令设置）将表达式结果转换成文本输出；可以使用内建函数string格式化单个Interpolation，下面是一个例子： </p><pre>&lt;#assign foo=true/&gt;${foo?string(&quot;yes&quot;, &quot;no&quot;)}</pre><p> 输出结果是： </p><pre>yes</pre><ul><li>数字Interpolation的#{expr; format}形式可以用来格式化数字，format可以是： </li></ul><p>mX：小数部分最小X位 </p><p>MX：小数部分最大X位 </p><p>例子： </p><pre>&lt;#-- If the language is US English the output is: --&gt;&lt;#assign x=2.582/&gt;&lt;#assign y=4/&gt;#{x; M2}   &lt;#-- 2.58 --&gt;#{y; M2}   &lt;#-- 4    --&gt;#{x; m1}   &lt;#-- 2.6 --&gt;#{y; m1}   &lt;#-- 4.0 --&gt;#{x; m1M2} &lt;#-- 2.58 --&gt;#{y; m1M2} &lt;#-- 4.0  --&gt;  </pre><h3 id="section-FreeMarker_E8_AE_BE_E8_AE_A1_E6_8C_87_E5_8D_97-4_E6_9D_82_E9_A1_B9">4、杂项 </h3><h4 id="section-FreeMarker_E8_AE_BE_E8_AE_A1_E6_8C_87_E5_8D_97-1_E7_94_A8_E6_88_B7_E5_AE_9A_E4_B9_89_E6_8C_87_E4_BB_A4"> （1）用户定义指令 </h4><p>宏和变换器变量是两种不同类型的用户定义指令，它们之间的区别是宏是在模板中使用macro指令定义，而变换器是在模板外由程序定义，这里只介绍宏 </p><ul><li>基本用法 </li></ul><p>宏是和某个变量关联的模板片断，以便在模板中通过用户定义指令使用该变量，下面是一个例子： </p><pre>&lt;#macro greet&gt;  &lt;font size=&quot;+2&quot;&gt;Hello Joe!&lt;/font&gt;&lt;/#macro&gt;  </pre><p> 作为用户定义指令使用宏变量时，使用@替代FTL标记中的# </p><pre>&lt;@greet&gt;&lt;/@greet&gt;</pre><p> 如果没有体内容，也可以使用： </p><pre>&lt;@greet/&gt;</pre><ul><li>参数 </li></ul><p>在macro指令中可以在宏变量之后定义参数，如： </p><pre>&lt;#macro greet person&gt;  &lt;font size=&quot;+2&quot;&gt;Hello ${person}!&lt;/font&gt;&lt;/#macro&gt; </pre><p> 可以这样使用这个宏变量： </p><pre>&lt;@greet person=&quot;Fred&quot;/&gt; and &lt;@greet person=&quot;Batman&quot;/&gt; </pre><p> 输出结果是： </p><pre>  &lt;font size=&quot;+2&quot;&gt;Hello Fred!&lt;/font&gt; and   &lt;font size=&quot;+2&quot;&gt;Hello Batman!&lt;/font&gt;</pre><p>宏的参数是FTL表达式，所以下面的代码具有不同的意思： </p><pre>&lt;@greet person=Fred/&gt;</pre><p> 这意味着将Fred变量的值传给person参数，该值不仅是字符串，还可以是其它类型，甚至是复杂的表达式 </p><p>可以有多参数，下面是一个例子： </p><pre>&lt;#macro greet person color&gt;  &lt;font size=&quot;+2&quot; color=&quot;${color}&quot;&gt;Hello ${person}!&lt;/font&gt;&lt;/#macro&gt; </pre><p> 可以这样使用该宏变量： </p><pre>&lt;@greet person=&quot;Fred&quot; color=&quot;black&quot;/&gt; </pre><p> 其中参数的次序是无关的，因此下面是等价的： </p><pre>&lt;@greet color=&quot;black&quot; person=&quot;Fred&quot;/&gt;</pre><p> 只能使用在macro指令中定义的参数，并且对所有参数赋值，所以下面的代码是错误的： </p><pre>&lt;@greet person=&quot;Fred&quot; color=&quot;black&quot; background=&quot;green&quot;/&gt;&lt;@greet person=&quot;Fred&quot;/&gt;</pre><p> 可以在定义参数时指定缺省值，如： </p><pre>&lt;#macro greet person color=&quot;black&quot;&gt;  &lt;font size=&quot;+2&quot; color=&quot;${color}&quot;&gt;Hello ${person}!&lt;/font&gt;&lt;/#macro&gt;  </pre><p> 这样&lt;@greet person=&quot;Fred&quot;/&gt;就正确了 </p><p>宏的参数是局部变量，只能在宏定义中有效 </p><ul><li>嵌套内容 </li></ul><p>用户定义指令可以有嵌套内容，使用&lt;#nested&gt;指令执行指令开始和结束标记之间的模板片断 </p><p>例子： </p><pre>&lt;#macro border&gt;  &lt;table border=4 cellspacing=0 cellpadding=4&gt;&lt;tr&gt;&lt;td&gt;    &lt;#nested&gt;  &lt;/tr&gt;&lt;/td&gt;&lt;/table&gt;&lt;/#macro&gt;  </pre><p> 这样使用该宏变量： </p><pre>&lt;@border&gt;The bordered text&lt;/@border&gt;</pre><p> 输出结果： </p><pre>  &lt;table border=4 cellspacing=0 cellpadding=4&gt;&lt;tr&gt;&lt;td&gt;    The bordered text  &lt;/tr&gt;&lt;/td&gt;&lt;/table&gt;</pre><p>&lt;#nested&gt;指令可以被多次调用，例如： </p><pre>&lt;#macro do_thrice&gt;  &lt;#nested&gt;  &lt;#nested&gt;  &lt;#nested&gt;&lt;/#macro&gt;&lt;@do_thrice&gt;  Anything.&lt;/@do_thrice&gt;  </pre><p> 输出结果： </p><pre>  Anything.  Anything.  Anything. </pre><p> 嵌套内容可以是有效的FTL，下面是一个有些复杂的例子： <span>&lt;@border&gt;&lt;ul&gt; &lt;@do_thrice&gt; &lt;li&gt;&lt;@greet person=&quot;Joe&quot;/&gt;&lt;/@do_thrice&gt; &lt;/ul&gt; &lt;/@border&gt; } } } 输出结果： </span></p><pre>  &lt;table border=4 cellspacing=0 cellpadding=4&gt;&lt;tr&gt;&lt;td&gt;      &lt;ul&gt;    &lt;li&gt;&lt;font size=&quot;+2&quot;&gt;Hello Joe!&lt;/font&gt;    &lt;li&gt;&lt;font size=&quot;+2&quot;&gt;Hello Joe!&lt;/font&gt;    &lt;li&gt;&lt;font size=&quot;+2&quot;&gt;Hello Joe!&lt;/font&gt;  &lt;/ul&gt;  &lt;/tr&gt;&lt;/td&gt;&lt;/table&gt;  </pre><p> 宏定义中的局部变量对嵌套内容是不可见的，例如： </p><pre>&lt;#macro repeat count&gt;  &lt;#local y = &quot;test&quot;&gt;  &lt;#list 1..count as x&gt;    ${y} ${count}/${x}: &lt;#nested&gt;  &lt;/#list&gt;&lt;/#macro&gt;&lt;@repeat count=3&gt;${y?default(&quot;?&quot;)} ${x?default(&quot;?&quot;)} ${count?default(&quot;?&quot;)}&lt;/@repeat&gt;</pre><p> 输出结果： </p><pre>    test 3/1: ? ? ?    test 3/2: ? ? ?    test 3/3: ? ? ?</pre><ul><li>在宏定义中使用循环变量 </li></ul><p>用户定义指令可以有循环变量，通常用于重复嵌套内容，基本用法是：作为nested指令的参数传递循环变量的实际值，而在调用用户定义指令时，在&lt;@…&gt;开始标记的参数后面指定循环变量的名字 </p><p>例子： </p><pre>&lt;#macro repeat count&gt;  &lt;#list 1..count as x&gt;    &lt;#nested x, x/2, x==count&gt;  &lt;/#list&gt;&lt;/#macro&gt;&lt;@repeat count=4 ; c, halfc, last&gt;  ${c}. ${halfc}&lt;#if last&gt; Last!&lt;/#if&gt;&lt;/@repeat&gt;  </pre><p> 输出结果： </p><pre>  1. 0.5  2. 1  3. 1.5  4. 2 Last!</pre><p>指定的循环变量的数目和用户定义指令开始标记指定的不同不会有问题 </p><p>调用时少指定循环变量，则多指定的值不可见 </p><p>调用时多指定循环变量，多余的循环变量不会被创建 </p><h4 id="section-FreeMarker_E8_AE_BE_E8_AE_A1_E6_8C_87_E5_8D_97-2_E5_9C_A8_E6_A8_A1_E6_9D_BF_E4_B8_AD_E5_AE_9A_E4_B9_89_E5_8F_98_E9_87_8F"> （2）在模板中定义变量 </h4><p>在模板中定义的变量有三种类型： </p><ul><li>plain变量：可以在模板的任何地方访问，包括使用include指令插入的模板，使用assign指令创建和替换 </li></ul><ul><li>局部变量：在宏定义体中有效，使用local指令创建和替换 </li></ul><ul><li>循环变量：只能存在于指令的嵌套内容，由指令（如list）自动创建 </li></ul><p>宏的参数是局部变量，而不是循环变量；局部变量隐藏（而不是覆盖）同名的plain变量；循环变量隐藏同名的局部变量和plain变量，下面是一个例子： </p><pre>&lt;#assign x = &quot;plain&quot;&gt;1. ${x}  &lt;#-- we see the plain var. here --&gt;&lt;@test/&gt;6. ${x}  &lt;#-- the value of plain var. was not changed --&gt;&lt;#list [&quot;loop&quot;] as x&gt;  7. ${x}  &lt;#-- now the loop var. hides the plain var. --&gt;&lt;#assign x = &quot;plain2&quot;&gt; &lt;#-- replace the plain var, hiding does not mater here --&gt; 8. ${x}  &lt;#-- it still hides the plain var. --&gt;&lt;/#list&gt;   9. ${x}  &lt;#-- the new value of plain var. --&gt;&lt;#macro test&gt;  2. ${x}  &lt;#-- we still see the plain var. here --&gt;  &lt;#local x = &quot;local&quot;&gt;  3. ${x}  &lt;#-- now the local var. hides it --&gt;  &lt;#list [&quot;loop&quot;] as x&gt;    4. ${x}  &lt;#-- now the loop var. hides the local var. --&gt;  &lt;/#list&gt;  5. ${x}  &lt;#-- now we see the local var. again --&gt;&lt;/#macro&gt;  </pre><p> 输出结果： </p><pre>1. plain  2. plain  3. local    4. loop  5. local6. plain    7. loop    8. loop9. plain2</pre><p>内部循环变量隐藏同名的外部循环变量，如： </p><pre>&lt;#list [&quot;loop 1&quot;] as x&gt;  ${x}  &lt;#list [&quot;loop 2&quot;] as x&gt;    ${x}    &lt;#list [&quot;loop 3&quot;] as x&gt;      ${x}    &lt;/#list&gt;    ${x}  &lt;/#list&gt;  ${x}&lt;/#list&gt;</pre><p> 输出结果： </p><pre>  loop 1    loop 2      loop 3    loop 2  loop 1 </pre><p> 模板中的变量会隐藏（而不是覆盖）数据模型中同名变量，如果需要访问数据模型中的同名变量，使用特殊变量global，下面的例子假设数据模型中的user的值是Big Joe： </p><pre>&lt;#assign user = &quot;Joe Hider&quot;&gt;${user}          &lt;#-- prints: Joe Hider --&gt;${.globals.user} &lt;#-- prints: Big Joe --&gt;  </pre><h4 id="section-FreeMarker_E8_AE_BE_E8_AE_A1_E6_8C_87_E5_8D_97-3_E5_90_8D_E5_AD_97_E7_A9_BA_E9_97_B4">（3）名字空间 </h4><p>通常情况，只使用一个名字空间，称为主名字空间 </p><p>为了创建可重用的宏、变换器或其它变量的集合（通常称库），必须使用多名字空间，其目的是防止同名冲突 </p><ul><li>创建库 </li></ul><p>下面是一个创建库的例子（假设保存在lib/my_test.ftl中）： </p><pre>&lt;#macro copyright date&gt;  &lt;p&gt;Copyright (C) ${date} Julia Smith. All rights reserved.  &lt;br&gt;Email: ${mail}&lt;/p&gt;&lt;/#macro&gt;  &lt;#assign mail = &quot;jsmith@acme.com&quot;&gt; </pre><p> 使用import指令导入库到模板中，Freemarker会为导入的库创建新的名字空间，并可以通过import指令中指定的散列变量访问库中的变量： </p><pre>&lt;#import &quot;/lib/my_test.ftl&quot; as my&gt;&lt;#assign mail=&quot;fred@acme.com&quot;&gt;&lt;@my.copyright date=&quot;1999-2002&quot;/&gt;${my.mail}${mail}  </pre><p> 输出结果： </p><pre>  &lt;p&gt;Copyright (C) 1999-2002 Julia Smith. All rights reserved.  &lt;br&gt;Email: jsmith@acme.com&lt;/p&gt;jsmith@acme.comfred@acme.com  </pre><p> 可以看到例子中使用的两个同名变量并没有冲突，因为它们位于不同的名字空间 </p><p>可以使用assign指令在导入的名字空间中创建或替代变量，下面是一个例子： </p><pre>&lt;#import &quot;/lib/my_test.ftl&quot; as my&gt;${my.mail}&lt;#assign mail=&quot;jsmith@other.com&quot; in my&gt;${my.mail}  </pre><p> 输出结果： </p><pre>jsmith@acme.comjsmith@other.com  </pre><p> 数据模型中的变量任何地方都可见，也包括不同的名字空间，下面是修改的库： </p><pre>&lt;#macro copyright date&gt;  &lt;p&gt;Copyright (C) ${date} ${user}. All rights reserved.&lt;/p&gt;&lt;/#macro&gt;&lt;#assign mail = &quot;${user}@acme.com&quot;&gt;   </pre><p> 假设数据模型中的user变量的值是Fred，则下面的代码： </p><pre>&lt;#import &quot;/lib/my_test.ftl&quot; as my&gt;&lt;@my.copyright date=&quot;1999-2002&quot;/&gt;${my.mail}   </pre><p> 输出结果： </p><pre>  &lt;p&gt;Copyright (C) 1999-2002 Fred. All rights reserved.&lt;/p&gt;Fred@acme.com   </pre>',302);function g(_,n){return r(),o("div",null,[u,a,e(),s])}const q=l(i,[["render",g],["__file","2010-13.html.vue"]]);export{q as default};
