import{_ as e,p as r,q as o,a1 as a}from"./framework-5866ffd3.js";const l={},n=a('<p><span style="font-family:Verdana, Helvetica, Arial;color:#303030;line-height:18px;"><span style="color:#0000ff;font-size:x-small;"><strong> Log4j日志管理系统简单使用说明<br></strong></span><span style="font-size:x-small;"><br>    通常，我们都提供一个名为 log4j.properties的文件，在第一次调用到Log4J时，Log4J会在类路径（../web-inf/class/当然也可以放到其它任 何目录，只要该目录被包含到类路径中即可）中定位这个文件，并读入这个文件完成的配置。这个配置文件告 诉Log4J以什么样的格式、把什么样的信息、输出到什么地方。<br> Log4j有三个主要的组件：Loggers(记录器)，Appenders (输出源)和Layouts(布局)，这里可简单理解为日志类别，日志要输出的地方和日志以何种形式输出。综合使用这三个组件可以轻松的记录信息的类型和 级别，并可以在运行时控制日志输出的样式和位置。下面对三个组件分别进行说明：<br> <br> <strong>1、 Loggers<br></strong> Loggers组件在此系统中被分为五个级别：DEBUG、INFO、WARN、ERROR和FATAL。这五个级别是有顺序的，DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，分别用来指定这条日志信息的重要程度,明白这一点很重要，这里Log4j有一个规则：假设Loggers级别为P，如果在Loggers中发 生了一个级别Q比P高，则可以启动，否则屏蔽掉。<br>假设你定义的级别是info，那么error和warn的日志可以显示而比他低的debug信息就不显示了。<br>  <br> Java程序举例来说：<br> <br> //建立Logger的一个实例，命名为“com.foo”<br> Logger logger = Logger.getLogger(&quot;com.foo&quot;); //&quot;com.foo&quot;是实例进行命名，也可以任意<br> //设置logger的级别。通常不在程序中设置logger的级别。一般在配置文件中设置。<br> logger.setLevel(Level.INFO);<br> Logger barlogger = Logger.getLogger(&quot;com.foo.Bar&quot;);<br> //下面这个请求可用，因为WARN &gt;= INFO<br> logger.warn(&quot;Low fuel level.&quot;);<br> //下面这个请求不可用，因为DEBUG &lt; INFO<br> logger.debug(&quot;Starting search for nearest gas station.&quot;);<br> //命名为“com.foo.bar”的实例barlogger会继承实例“com.foo”的级别。因此，下面这个请求可用，因为INFO &gt;= INFO<br> barlogger.info(&quot;Located nearest gas station.&quot;);<br> //下面这个请求不可用，因为DEBUG &lt; INFO<br> barlogger.debug(&quot;Exiting gas station search&quot;);<br> 这里“是否可用”的意思是能否输出Logger信息。<br> 在对Logger实例进行命名时，没有限制，可以取任意自己感兴趣的名字。一般情况下建议以类的所在位置来命名Logger实例，这是目前来讲比较有效的Logger命名方式。这样可以使得每个类建立自己的日志信息，便于管理。比如：<br> <br> static Logger logger = Logger.getLogger(ClientWithLog4j.class.getName());<br> <br> <strong> 2、Appenders<br></strong> 禁用与使用日志请求只是Log4j其中的一个小小的地方，Log4j日志系统允许把日志输出到不同的地方，如控制台（Console）、文件（Files）、根据天数或者文件大小产生新的文件、以流的形式发送到其它地方等等。<br> <br> 其语法表示为：<br> <br> org.apache.log4j.ConsoleAppender（控制台）<br> org.apache.log4j.FileAppender（文件）<br> org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）<br>    org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）<br> org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）<br> <br> 配置时使用方式为：<br> log4j.appender.appenderName = fully.qualified.name.of.appender.class<br> log4j.appender.appenderName.option1 = value1<br> …<br>    log4j.appender.appenderName.option = valueN<br> 这样就为日志的输出提供了相当大的便利。<br> <br><strong> 3、Layouts</strong><br> 有时用户希望根据自己的喜好格式化自己的日志输出。Log4j可以在Appenders的后面附加Layouts来完成这个功能。Layouts提供了 四种日志输出样式，如根据HTML样式、自由指定样式、包含日志级别与信息的样式和包含日志时间、线程、类别等信息的样式等等。<br> <br> 其语法表示为：<br> <br> org.apache.log4j.HTMLLayout（以HTML表格形式布局），<br> org.apache.log4j.PatternLayout（可以灵活地指定布局模式），<br> org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），<br> org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）<br> <br> 配置时使用方式为：<br> <br> log4j.appender.appenderName.layout =fully.qualified.name.of.layout.class<br> log4j.appender.appenderName.layout.option1 = value1<br> …<br> log4j.appender.appenderName.layout.option = valueN</span> <p><span style="font-size:x-small;"><strong><span style="color:#0000ff;"> Log4j的配置 </span></strong><br> <br> 以上是从原理方面说明Log4j的使用方法，在具体Java编程使用Log4j可以参照以下示例：<br> <br> <strong>1、 建立Logger实例</strong>：<br> 语法表示：public static Logger getLogger( String name)<br> 实际使用：static Logger logger = Logger.getLogger(ServerWithLog4j.class.getName ()) ;<br> <br> <strong>2、 读取配置文件</strong>：<br> 获得了Logger的实例之后，接下来将配置Log4j使用环境：<br> 语法表示：<br> BasicConfigurator.configure()：自动快速地使用缺省Log4j环境。<br> PropertyConfigurator.configure(String configFilename)：读取使用Java的特性文件编写的配置文件。<br> DOMConfigurator.configure(String filename)：读取XML形式的配置文件。<br> 实际使用：<br>    PropertyConfigurator.configure(&quot;ServerWithLog4j.properties&quot;);<br> <br> <strong>3、 插入日志信息</strong><br> 完成了以上连个步骤以后，下面就可以按日志的不同级别插入到你要记录日志的任何地方了。<br> 语法表示：<br> Logger.debug(Object message);//调试信息<br> Logger.info(Object message);//一般信息<br> Logger.warn(Object message);//警告信息<br> Logger.error(Object message);//错误信息<br> Logger.fatal(Object message);//致命错误信息</span></p> <p><span style="font-size:x-small;"> 实际使用：logger.info(&quot;ServerSocket before accept: &quot; + server);<br> <br><strong><span style="color:#0000ff;">  配置过程 <br><br></span></strong> 在实际编程时，要使Log4j真正在系统中运行事先还要对配置文件进行定义。定义步骤就是对Logger、Appender及Layout的分别使用。<br>    Log4j支持两种配置文件格式，一种是XML格式的文件，一种是java properties（key=value）【Java特性文件（键=值）】。下面我们介绍使用Java特性文件做为配置文件的方法<br>   具体如下：<br> <br> <strong>1、配置根Logger，</strong>其语法为：<br> log4j.rootLogger = [ level ] , appenderName1, appenderName2, …<br>         level : 是日志记录的优先级，分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者您定义的级别。Log4j建议只使用四个级别，优 先级从高到低分别是ERROR、WARN、INFO、DEBUG。通过在这里定义的级别，您可以控制到应用程序中相应级别的日志信息的开关。比如在这里定 义了INFO级别，则应用程序中所有DEBUG级别的日志信息将不被打印出来。<br>      appenderName:就是指定日志信息输出到哪个地方。您可以同时指定多个输出目的地。<br>   例如：log4j.rootLogger＝info,A1,B2,C3<br> <br> <strong>2、配置日志信息输出目的地</strong>，其语法为：<br> log4j.appender.appenderName = fully.qualified.name.of.appender.class  //<br>   &quot;fully.qualified.name.of.appender.class&quot; 可以指定下面五个目的地中的一个：<br>          1.org.apache.log4j.ConsoleAppender（控制台）<br>          2.org.apache.log4j.FileAppender（文件）<br>          3.org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）<br>          4.org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）<br>          5.org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）<br>             <strong>1.ConsoleAppender选项<br></strong>                    Threshold=WARN:指定日志消息的输出最低层次。<br>                    ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出。<br>                    Target=System.err：默认情况下是：System.out,指定输出控制台<br>              <strong>2.FileAppender</strong> 选项<br>                    Threshold=WARN:指定日志消息的输出最低层次。<br>                    ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出。<br>                    File=mylog.txt:指定消息输出到mylog.txt文件。<br>                    Append=false:默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容。<br>            3.<strong>DailyRollingFileAppender</strong> 选项<br>                    Threshold=WARN:指定日志消息的输出最低层次。<br>                    ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出。<br>                     File=mylog.txt:指定消息输出到 mylog.txt文件。<br>                    Append=false:默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容。<br>                    DatePattern=&#39;.&#39;yyyy-ww:每周滚动一次文件，即每周产生一个新的文件。当然也可以指定按月、周、天、时和分。即对应的格式如下：<br>                    1)&#39;.&#39;yyyy-MM: 每月<br>                    2)&#39;.&#39;yyyy-ww: 每周 <br>                    3)&#39;.&#39;yyyy-MM-dd: 每天<br>                    4)&#39;.&#39;yyyy-MM-dd-a: 每天两次<br>                    5)&#39;.&#39;yyyy-MM-dd-HH: 每小时<br>                    6)&#39;.&#39;yyyy-MM-dd-HH-mm: 每分钟<br>            4.<strong>RollingFileAppender</strong> 选项<br>                     Threshold=WARN:指定日志消息的输出最低层次。<br>                     ImmediateFlush=true:默认值是true,意 谓着所有的消息都会被立即输出。<br>                    File=mylog.txt:指定消息输出到mylog.txt文件。<br>                    Append=false:默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容。<br>                    MaxFileSize=100KB: 后缀可以是KB, MB 或者是 GB. 在日志文件到达该大小时，将会自动滚动，即将原来的内容移到mylog.log.1文件。<br>                    MaxBackupIndex=2:指定可以产生的滚动文件的最大数。</span></p> <p><span style="font-size:x-small;">实际应用：<br> log4j.appender.A1=org.apache.log4j.ConsoleAppender //这里指定了日志输出的第一个位置A1是控制台ConsoleAppender<br> <br> <strong>3、配置日志信息的格式</strong>，其语法为：<br> <strong>A.</strong><strong>log4j.appender.appenderName.layout = fully.qualified.name.of.layout.class<br></strong>              &quot;fully.qualified.name.of.layout.class&quot; 可以指定下面4个格式中的一个：<br>               1.org.apache.log4j.HTMLLayout（以HTML表格形式布局），<br>        2.org.apache.log4j.PatternLayout（可以灵活地指定布局模式），<br>        3.org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），<br>        4.org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）<br>                   1.HTMLLayout 选项<br>                      LocationInfo=true:默认值是false,输出java文件名称和行号<br>                      Title=my app file: 默认值是 Log4J Log Messages.<br>                   2.PatternLayout 选项<br>                      ConversionPattern=%m%n :指定怎样格式化指定的消息。<br>                   3.XMLLayout  选项<br>                      LocationInfo=true:默认值是false,输出java文件和行号<br>   实际应用：<br>   log4j.appender.A1.layout=org.apache.log4j.PatternLayout</span></p> <p><span style="font-size:x-small;">       <strong>B</strong>.<strong> log4j.appender.A1.layout.ConversionPattern=%-4r %-5p %d{yyyy-MM-dd HH:mm:ssS} %c %m%n<br></strong>           这里需要说明的就是日志信息格式中几个符号所代表的含义：<br>          －X号: X信息输出时左对齐；<br>                   %p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL,<br>                   %d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921<br>                   %r: 输出自应用启动到输出该log信息耗费的毫秒数<br>                   %c: 输出日志信息所属的类目，通常就是所在类的全名<br>                   %t: 输出产生该日志事件的线程名<br>                   %l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main (TestLog4.java:10)<br>                   %x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。<br>                   %%: 输出一个&quot;%&quot;字符<br>                   %F: 输出日志消息产生时所在的文件名称<br>                   %L: 输出代码中的行号<br>                   %m: 输出代码中指定的消息,产生的日志具体信息<br>                   %n: 输出一个回车换行符，Windows平台为&quot;\\r\\n&quot;，Unix平台为&quot;\\n&quot;输出日志信息换行<br>            可以在%与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式。如：<br>                     1)%20c：指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，默认的情况下右对齐。<br>                     2)%-20c:指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，&quot;-&quot;号指定左对齐。<br>                     3)%.30c:指定输出category的名称，最大的宽度是30，如果category的名称大于30的话，就会将左边多出的字符截掉，但小于30的 话也不会有空格。<br>                     4)%20.30c:如果category的名称小于20就补空格，并且右对齐，如果其名称长于30字符，就从左边交远销出的字符截掉。</span></p> <p><span style="font-size:x-small;"> 这里上面三个步骤是对前面Log4j组件说明的一个简化；下面给出一个具体配置例子，在程序中可以参照执行：<br> log4j.rootLogger=INFO,A1，B2<br> log4j.appender.A1=org.apache.log4j.ConsoleAppender<br> log4j.appender.A1.layout=org.apache.log4j.PatternLayout<br> log4j.appender.A1.layout.ConversionPattern=%-4r %-5p %d{yyyy-MM-dd HH:mm:ssS} %c %m%n<br>  根据上面的日志格式，某一个程序的输出结果如下：<br> 0 INFO 2003-06-13 13:23:46968 ClientWithLog4j Client socket: Socket[addr=localhost/127.0.0.1,port=8002,localport=2014]<br>         16 DEBUG 2003-06-13 13:23:46984 ClientWithLog4j Server says: &#39;Java server with log4j, Fri Jun 13 13:23:46 CST 2003&#39;<br> 16 DEBUG 2003-06-13 13:23:46984 ClientWithLog4j GOOD<br> 16 DEBUG 2003-06-13 13:23:46984 ClientWithLog4j Server responds: &#39;Command &#39;HELLO&#39; not understood.&#39;<br> 16 DEBUG 2003-06-13 13:23:46984 ClientWithLog4j HELP<br> 16 DEBUG 2003-06-13 13:23:46984 ClientWithLog4j Server responds: &#39;Vocabulary: HELP QUIT&#39;<br> 16 DEBUG 2003-06-13 13:23:46984 ClientWithLog4j QUIT<br> <br>     <strong> 4. # 当输出信息于回滚文件时</strong></span></p> <p><span style="font-size:x-small;">          log4j.appender.ROLLING_FILE=org.apache.log4j.RollingFileAppender   //指定以文件的方式输出日志<br>           log4j.appender.ROLLING_FILE.Threshold=ERROR <br>           log4j.appender.ROLLING_FILE.File=rolling.log  //文件位置,也可以用变量${java.home}、rolling.log<br>           log4j.appender.ROLLING_FILE.Append=true <br>           log4j.appender.ROLLING_FILE.MaxFileSize=10KB  //文件最大尺寸<br>           log4j.appender.ROLLING_FILE.MaxBackupIndex=1  //备份数<br>           log4j.appender.ROLLING_FILE.layout=org.apache.log4j.PatternLayout <br>           log4j.appender.ROLLING_FILE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n  </span></p> <p><span style="font-size:x-small;">××××××××××××××××××××××××××××××××××××××××××××××××<br><strong><span style="color:#0000ff;"> <br></span></strong><strong><span style="color:#0000ff;"> Log4j比较全面的配置 <br></span></strong></span></p> <p><span style="font-size:x-small;"> LOG4J的配置之简单使它遍及于越来越多的应用中了：Log4J配置文件实现了输出到控制台、文件、回滚文件、发送日志邮件、输出到数据库日志表、自定义标签等全套功能。择其一二使用就够用了，</span></p> <p><span style="font-size:x-small;"> log4j.rootLogger=DEBUG,CONSOLE,A1,im <br> log4j.addivity.org.apache=true</span></p> <p><span style="font-size:x-small;"> # 应用于控制台</span></p> <p><span style="font-size:x-small;"> log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender <br> log4j.appender.Threshold=DEBUG <br> log4j.appender.CONSOLE.Target=System.out <br> log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout <br> log4j.appender.CONSOLE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n <br> #log4j.appender.CONSOLE.layout.ConversionPattern=[start]%d{DATE}[DATE]%n%p[PRIORITY]%n%x[NDC]%n%t[THREAD] n%c[CATEGORY]%n%m[MESSAGE]%n%n</span></p> <p><span style="font-size:x-small;"> #应用于文件</span></p> <p><span style="font-size:x-small;"> log4j.appender.FILE=org.apache.log4j.FileAppender <br> log4j.appender.FILE.File=file.log <br> log4j.appender.FILE.Append=false <br> log4j.appender.FILE.layout=org.apache.log4j.PatternLayout <br> log4j.appender.FILE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n <br> # Use this layout for LogFactor 5 analysis</span></p> <p><span style="font-size:x-small;"> # 应用于文件回滚</span></p> <p><span style="font-size:x-small;"> log4j.appender.ROLLING_FILE=org.apache.log4j.RollingFileAppender <br> log4j.appender.ROLLING_FILE.Threshold=ERROR <br> log4j.appender.ROLLING_FILE.File=rolling.log  //文件位置,也可以用变量${java.home}、rolling.log<br> log4j.appender.ROLLING_FILE.Append=true       //true:添加  false:覆盖<br> log4j.appender.ROLLING_FILE.MaxFileSize=10KB   //文件最大尺寸<br> log4j.appender.ROLLING_FILE.MaxBackupIndex=1  //备份数<br> log4j.appender.ROLLING_FILE.layout=org.apache.log4j.PatternLayout <br> log4j.appender.ROLLING_FILE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n</span></p> <p><span style="font-size:x-small;"><br> #应用于socket <br> log4j.appender.SOCKET=org.apache.log4j.RollingFileAppender <br> log4j.appender.SOCKET.RemoteHost=localhost <br> log4j.appender.SOCKET.Port=5001 <br> log4j.appender.SOCKET.LocationInfo=true <br> # Set up for Log Facter 5 <br> log4j.appender.SOCKET.layout=org.apache.log4j.PatternLayout <br> log4j.appender.SOCET.layout.ConversionPattern=[start]%d{DATE}[DATE]%n%p[PRIORITY]%n%x[NDC]%n%t[THREAD]%n%c[CATEGORY]%n%m[MESSAGE]%n%n</span></p> <p><span style="font-size:x-small;"><br> # Log Factor 5 Appender <br> log4j.appender.LF5_APPENDER=org.apache.log4j.lf5.LF5Appender <br> log4j.appender.LF5_APPENDER.MaxNumberOfRecords=2000</span></p> <p><span style="font-size:x-small;"> # 发送日志给邮件</span></p> <p><span style="font-size:x-small;"> log4j.appender.MAIL=org.apache.log4j.net.SMTPAppender <br> log4j.appender.MAIL.Threshold=FATAL <br> log4j.appender.MAIL.BufferSize=10 <br> <a style="color:#366900;text-decoration:none;" href="mailto:log4j.appender.MAIL.From=web@www.wuset.com">log4j.appender.MAIL.From=web@www.wuset.com</a><br> log4j.appender.MAIL.SMTPHost=www.wusetu.com <br> log4j.appender.MAIL.Subject=Log4J Message <br> <a style="color:#366900;text-decoration:none;" href="mailto:log4j.appender.MAIL.To=web@www.wusetu.com">log4j.appender.MAIL.To=web@www.wusetu.com</a><br> log4j.appender.MAIL.layout=org.apache.log4j.PatternLayout <br> log4j.appender.MAIL.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n</span></p> <p><span style="font-size:x-small;"> # 用于数据库 <br> log4j.appender.DATABASE=org.apache.log4j.jdbc.JDBCAppender <br> log4j.appender.DATABASE.URL=jdbc:mysql://localhost:3306/test <br> log4j.appender.DATABASE.driver=com.mysql.jdbc.Driver <br> log4j.appender.DATABASE.user=root <br> log4j.appender.DATABASE.password= <br> log4j.appender.DATABASE.sql=INSERT INTO LOG4J (Message) VALUES (&#39;[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n&#39;) <br> log4j.appender.DATABASE.layout=org.apache.log4j.PatternLayout <br> log4j.appender.DATABASE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n</span></p> <p><span style="font-size:x-small;"><br> log4j.appender.A1=org.apache.log4j.DailyRollingFileAppender <br> log4j.appender.A1.File=SampleMessages.log4j <br> log4j.appender.A1.DatePattern=yyyyMMdd-HH&#39;.log4j&#39; <br> log4j.appender.A1.layout=org.apache.log4j.xml.XMLLayout</span></p> <p><span style="font-size:x-small;"> #自定义Appender</span></p> <p><span style="font-size:x-small;"> log4j.appender.im = net.cybercorlin.util.logger.appender.IMAppender</span></p> <p><span style="font-size:x-small;"> log4j.appender.im.host = mail.cybercorlin.net <br> log4j.appender.im.username = username <br> log4j.appender.im.password = password <br> log4j.appender.im.recipient = <a style="color:#366900;text-decoration:none;" href="mailto:corlin@cybercorlin.net">corlin@cybercorlin.net</a></span></p> <p><span style="font-size:x-small;"> log4j.appender.im.layout=org.apache.log4j.PatternLayout <br> log4j.appender.im.layout.ConversionPattern =[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n</span></p></span></p>',1),t=[n];function p(g,s){return r(),o("div",null,t)}const d=e(l,[["render",p],["__file","2010-54.html.vue"]]);export{d as default};
