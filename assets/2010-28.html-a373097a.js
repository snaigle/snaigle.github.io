import{_ as o,p as r,q as a,t as e,R as t,a1 as l}from"./framework-5866ffd3.js";const s={},b=t("p",null,[t("span",{style:{"font-family":"Arial, sans-serif, Helvetica, Tahoma","line-height":"18px"}})],-1),n=t("div",{class:"blog_title",style:{"margin-bottom":"15px"}},[t("h3",{style:{"font-size":"16px","line-height":"1.5em","margin-top":"0px","margin-right":"0px","margin-bottom":"0.5em","margin-left":"0px","padding-top":"10px","padding-right":"0px","padding-bottom":"0px","padding-left":"0px",color:"black"}},[t("br")])],-1),i=l('<div class="blog_content">     一个基于java的模板引擎（Template engine），它允许任何人仅仅简单的使用模板语言（template language）来引用java代码定义的对象。当velocity应用于web开发时，界面设计人员可以和Java程序开发人员同步开发一个基于MVC框架web站点。  <br>    也就是说，页面设计人员可以只关注页面的显示效果，而由java程序开发人员关注业务逻辑编码。Velocity将java代码从web页面中分离出来，这样为web站点的长期维护提供了便利，同时也为我们在JSP和PHP之外又提供了一种可选的方案。  <br> <br>    先来看看velocity的语法：vtl也就是velocity的基本语言.用过脚本语言的，对于这个应该会很容易上手，其实，基本上，语法可以分为变量和关键词。  <br>     <strong style="font-weight:bold;">定义变量：</strong>  <br>    变量使用$作为开头符号，$a 和${a}是一致的。在模版中声明一个变量是很容易的，使用set关键字，例如：  <br>    #set( $foo = &quot;Velocity&quot; )  <br> <br>    对于velocity中，感觉比较灵活的就是变量中，可以直接使用方法，和javabean属性一样方便使用：  <br>    如下：$customer.Address，$purchase.Total，$customer.Address.phone。不过好像不支持map语法，如：a[&quot;key&quot;]这种写法，但是可以使用方法代替：a.get(&quot;key&quot;)。而使用了方法，感觉就在使用java代码一样方便。当然变量中支持简单的表达式计算：$a+1等等。  <br>   有一点需要注意的是，如果变量没有解析，还是会输出$a这个变量，而不是空白或者报错。  <br> <br>     <strong style="font-weight:bold;">关键字：</strong>  <br>    关键字使用#开头。  <br>   其关键字也不多，只有少数的几个，但是已经足够用了。如前面的声明变量：#set  <br>   #if #elseif #else  #end 这是最常用的条件判断，每个判断使用#end结尾  <br>   #if($a==1)true enough#{else}no way!#end  <br> <br>   #foreach() #end用于循环输出  <br>   #foreach( $key in $allProducts.keySet() )  <br>    &lt;li&gt;Key: $key -&gt; Value: $allProducts.get($key)&lt;/li&gt;  <br>   #end  <br>    <br>   #include，用于包括一些资源文件，当然include是不会去解析资源文件，这和#parse不同  <br>   #include( &quot;one.txt&quot; )  <br> <br>   #parse，用于解析并且包括相应的资源文件  <br>   #parse( &quot;me.vm&quot; )，和主文件共享相应的Context  <br>    <br>   #stop,用于停止执行解析，并返回，主要用于调试功能。  <br> <br>   基本上，使用以上的语法，可以定义出任何的模版了。当然，为了简化模版的定义，velocity特意推出了#macro这个强大的功能.  <br>   #macro，类似于宏定义，用于自定义相应的标记。  <br>   如下定义了一段宏，用于输出表格中的列表  <br>   #macro( tablerows $color $somelist )  <br>    #foreach( $something in $somelist )  <br>        &lt;tr&gt;&lt;td bgcolor=$color&gt;$something&lt;/td&gt;&lt;/tr&gt;  <br>    #end  <br>   #end  <br>    <br>   在模版中，只需要使用#tablerows($color $somelist)就可以取代里面的代码了：  <br>   #set( $greatlakes = [&quot;Superior&quot;,&quot;Michigan&quot;,&quot;Huron&quot;,&quot;Erie&quot;,&quot;Ontario&quot;] )  <br>   #set( $color = &quot;blue&quot; )  <br>  &lt;table&gt;  <br>     #tablerows( $color $greatlakes )  <br>  &lt;/table&gt;  <br>   <br>   而且#macro 支持内嵌语法，所以对于模版的定义，就变得更加的灵活而简单了。 </div>',1),c=t("p",null," ",-1);function u(d,g){return r(),a("div",null,[b,e(),n,e(),i,e(),c])}const p=o(s,[["render",u],["__file","2010-28.html.vue"]]);export{p as default};
