import{_ as n,p as a,q as s,a1 as t}from"./framework-5866ffd3.js";const p={},e=t(`<h2 id="从认证说起" tabindex="-1"><a class="header-anchor" href="#从认证说起" aria-hidden="true">#</a> 从认证说起</h2><blockquote><p>认证就是确认用户的身份</p></blockquote><h3 id="一、双因素认证" tabindex="-1"><a class="header-anchor" href="#一、双因素认证" aria-hidden="true">#</a> 一、双因素认证</h3><p>认证的难点在于如何证明一个人的身份？</p><p>我们将能证明用户身份的特征分为以下三类：</p><ol><li>秘密信息： 密码、私钥等</li><li>个人物品：银行卡、手机等</li><li>生理特征：指纹、faceId，虹膜等</li></ol><p>这些证据就称为“因素”（factor)。因素越多，证明力就越强，身份就越可靠。</p><p>双因素认证就是指，通过认证同时需要两个因素的证据。</p><p>比如 去银行柜台取钱就是最常见的双因素认证，用户必须同时提供银行卡和密码，才能取到现金。</p><h3 id="二、双因素认证方案" tabindex="-1"><a class="header-anchor" href="#二、双因素认证方案" aria-hidden="true">#</a> 二、双因素认证方案</h3><p>常见的双因素组合是密码+手机，因为手机太普及了，硬件口令令牌都被淘汰了。</p><p>比如很多网站登录时，除了输入账号和密码外 还需要输入短消息验证码。</p><h3 id="三、otp的概念" tabindex="-1"><a class="header-anchor" href="#三、otp的概念" aria-hidden="true">#</a> 三、OTP的概念</h3><p>OTP的全称是“基于时间的一次性密码”(One-Time Password)。它是公认的可靠解决方案，已经写入国际标准RFC6238。它有几种实现方式，基于时间是TOTP，基于计数器的是HOTP。 步骤如下：</p><ol><li>第一步，用户开启双因素认证后，服务器生成一个密钥</li><li>第二步，服务器提示用户扫描二维码（或者手工输入也行），把密钥保存到用户的手机。也就是说，服务器和用户的手机现在都有了同一把密钥。（密钥必须跟手机绑定。一旦用户更换手机，就必须生成全新的密钥</li><li>用户登录时，手机客户端使用这个密钥和当前时间戳，生成一个哈希，有效期默认为30秒。用户在有效期内，把这个哈希提交给服务器。</li><li>第四步，服务器也使用密钥和当前时间戳，生成一个哈希，跟用户提交的哈希对比。只要两者不一致，就拒绝登录。</li></ol><p>TOTP和HOTP的算法基本一致，TOTP使用时间因子做为变量，HOTP使用counter来做为变量，下面我们只解释TOTP</p><h3 id="四、totp算法" tabindex="-1"><a class="header-anchor" href="#四、totp算法" aria-hidden="true">#</a> 四、TOTP算法</h3><p>你可能有一个问题：客户端和服务器如何保证30秒期间都得到同一个哈希呢？</p><p>答案就是下面的公式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>TC = floor((unixtime(now)-unixtime(T0)) / TS)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的公式中，TC表示一个时间计数器，unixtime(now) 是当前unix时间戳，unixtime(T0)是约定的起始时间点的时间戳，默认是0。TS内里是哈希有效期的时间长度，默认是30秒。因此，上面的公式就变成下面的形式。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>TC = floor(unixtime(now) / 30)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所以只要在30秒以内，TC的值都是一样的。前提是服务器和手机的时间必须同步。</p><p>接下来，就可以算出哈希了。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>TOTP = HASH(SecretKey,TC)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面代码中，<code>HASH</code> 就是约定的哈希函数，默认是SHA-1.</p><p>TOTP有硬件生成器和软件生成器之分，都是采用上面的算法。</p><p>软件：推荐Google Authenticator ，当然也有微信小程序版的</p><h3 id="五、totp的实现" tabindex="-1"><a class="header-anchor" href="#五、totp的实现" aria-hidden="true">#</a> 五、TOTP的实现</h3><p>TOTP很容易写，各个语言都有实现。下面我用Java来演示下真实代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">long</span> timestamp <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">30</span><span class="token punctuation">;</span>
        <span class="token class-name">Mac</span> mac <span class="token operator">=</span> <span class="token class-name">Mac</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;HMACSHA1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mac<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span><span class="token class-name">Base32String</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>secretKey<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hash <span class="token operator">=</span> mac<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putLong</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> offset <span class="token operator">=</span> hash<span class="token punctuation">[</span>hash<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xF</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> truncatedHash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>
                  hash<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> hash<span class="token punctuation">.</span>length <span class="token operator">-</span> offset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x7FFFFFFF</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> pinValue <span class="token operator">=</span> truncatedHash <span class="token operator">%</span> <span class="token number">1_000_000</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> code <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">leftPad</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>pinValue<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="六、总结" tabindex="-1"><a class="header-anchor" href="#六、总结" aria-hidden="true">#</a> 六、总结</h3><p>双因素认证的优点在于，比单纯的密码登录安全得多。只要手机上的密钥安全就行。</p><p>缺点丰于，登录多了一步，费时且麻烦。</p><p>还有一个最大的问题，就是密钥丢失后如何恢复？</p>`,35),o=[e];function c(l,i){return a(),s("div",null,o)}const r=n(p,[["render",c],["__file","2017-11-30-2fa-totp.html.vue"]]);export{r as default};
