import{_ as l,p as o,q as e,a1 as s}from"./framework-5866ffd3.js";const t={},a=s('<p> 还在弄springmvc的事，又遇到了 @RequestParam 和 @PathVarable的的区别 </p><p> 前者是用来自动注入request中的参数的，如果参数转换出错的话整个请求会报错，所以得指定默认值才行， 而后者是和@requestMapping配合实现路径参数的 </p><p> 还有就是重定向的问题： 默认的InnerResourceResolver 是生成jstlview的，它就可以处理重定向，我们通常action中返回“viewpath”， 只需这样返回“redirect:url” 即可，同理可以使用&quot;forward:action&quot; </p><p> 但是要是想返回json视图的话就不行了，spring mvc </p><p> 中可以通过@ResponseBody注解来将返回值直接解析为json然后写到response中，不过需要用到 jackson-mapping-asl </p><p> 如果想文件上传的话就需要自己定义视图了如 </p><p><ol style="margin-left:0px;background-color:#FFFFFF;color:#2B91AF;font-family:Monaco, &#39;DejaVu Sans Mono&#39;, &#39;Bitstream Vera Sans Mono&#39;, Consolas, &#39;Courier New&#39;, monospace;text-align:left;"><li style="font-size:1em;margin-left:38px;background-color:#FAFAFA;"><span style="color:black;">  &lt;bean id=<span style="color:blue;">&quot;multipartResolver&quot;</span>  </span></li><li style="font-size:1em;margin-left:38px;background-color:#FAFAFA;"><span style="color:black;">        <span style="color:#7F0055;font-weight:bold;">class</span>=<span style="color:blue;">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;  </span></li><li style="font-size:1em;margin-left:38px;background-color:#FAFAFA;"><span style="color:black;">        &lt;!-- one of the properties available; the maximum file size in bytes --&gt;  </span></li><li style="font-size:1em;margin-left:38px;background-color:#FAFAFA;"><span style="color:black;">        &lt;property name=<span style="color:blue;">&quot;maxUploadSize&quot;</span> value=<span style="color:blue;">&quot;100000&quot;</span> /&gt;  </span></li><li style="font-size:1em;margin-left:38px;background-color:#FAFAFA;"><span style="color:black;">    &lt;/bean&gt; </span></li></ol></p><p> 需要依赖两个jar包： apache.commons.fileupload 和apache.commons.io </p><p> 这样就可以自动注入参数了 </p><p> 如 </p><p><ol style="margin-left:0px;background-color:#FFFFFF;color:#2B91AF;font-family:Monaco, &#39;DejaVu Sans Mono&#39;, &#39;Bitstream Vera Sans Mono&#39;, Consolas, &#39;Courier New&#39;, monospace;text-align:left;"><li style="font-size:1em;margin-left:38px;background-color:#FAFAFA;"><span style="color:black;"><span style="color:#646464;">@RequestMapping</span>(value = <span style="color:blue;">&quot;/form&quot;</span>, method = RequestMethod.POST)  </span></li><li style="font-size:1em;margin-left:38px;background-color:#FAFAFA;"><span style="color:black;"><span style="color:#7F0055;font-weight:bold;">public</span> String handleFormUpload(<span style="color:#646464;">@RequestParam</span>(<span style="color:blue;">&quot;name&quot;</span>) String name,  </span></li><li style="font-size:1em;margin-left:38px;background-color:#FAFAFA;"><span style="color:black;"><span style="color:#646464;">@RequestParam</span>(<span style="color:blue;">&quot;file&quot;</span>) MultipartFile file) {  </span></li><li style="font-size:1em;margin-left:38px;background-color:#FAFAFA;"><span style="color:black;"><span style="color:#7F0055;font-weight:bold;">if</span> (!file.isEmpty()) {  </span></li><li style="font-size:1em;margin-left:38px;background-color:#FAFAFA;"><span style="color:black;"><span style="color:#7F0055;font-weight:bold;">byte</span>[] bytes = file.getBytes();  </span></li><li style="font-size:1em;margin-left:38px;background-color:#FAFAFA;"><span style="color:black;"><span style="color:#008200;">// 去理上传写文件代码</span>  </span></li><li style="font-size:1em;margin-left:38px;background-color:#FAFAFA;"><span style="color:black;">  </span></li><li style="font-size:1em;margin-left:38px;background-color:#FAFAFA;"><span style="color:black;">}  </span></li></ol> 多文件上传的话就这样 </p><p><ol style="margin-left:0px;background-color:#FFFFFF;color:#2B91AF;font-family:Monaco, &#39;DejaVu Sans Mono&#39;, &#39;Bitstream Vera Sans Mono&#39;, Consolas, &#39;Courier New&#39;, monospace;text-align:left;"><li style="font-size:1em;margin-left:38px;background-color:#FAFAFA;"><span style="color:black;">   <span style="color:#646464;">@RequestMapping</span>(value = <span style="color:blue;">&quot;/multipartFileUpload&quot;</span>,method = RequestMethod.POST)  </span></li><li style="font-size:1em;margin-left:38px;background-color:#FAFAFA;"><span style="color:black;">         <span style="color:#7F0055;font-weight:bold;">public</span> String upload2(  </span></li><li style="font-size:1em;margin-left:38px;background-color:#FAFAFA;"><span style="color:black;">            MultipartHttpServletRequest request ,  </span></li><li style="font-size:1em;margin-left:38px;background-color:#FAFAFA;"><span style="color:black;">            <span style="color:#646464;">@RequestParam</span>(<span style="color:blue;">&quot;name&quot;</span>) String name    <span style="color:#008200;">// 页面上的控件值</span>  </span></li><li style="font-size:1em;margin-left:38px;background-color:#FAFAFA;"><span style="color:black;">            ) <span style="color:#7F0055;font-weight:bold;">throws</span> Exception {  </span></li><li style="font-size:1em;margin-left:38px;background-color:#FAFAFA;"><span style="color:black;">          List&lt;MultipartFile&gt; files = request.getFiles(<span style="color:blue;">&quot;file&quot;</span>);  </span></li><li style="font-size:1em;margin-left:38px;background-color:#FAFAFA;"><span style="color:black;">          <span style="color:#7F0055;font-weight:bold;">for</span>( <span style="color:#7F0055;font-weight:bold;">int</span> i=<span style="color:#C00000;">0</span>; i&lt;files.size() ;i++){  </span></li><li style="font-size:1em;margin-left:38px;background-color:#FAFAFA;"><span style="color:black;">               <span style="color:#7F0055;font-weight:bold;">if</span>(! files.get(i).isEmpty()) {  </span></li><li style="font-size:1em;margin-left:38px;background-color:#FAFAFA;"><span style="color:black;">                   logger.info(<span style="color:blue;">&quot;上传文件：&quot;</span>+files.get(i).getOriginalFilename());  </span></li><li style="font-size:1em;margin-left:38px;background-color:#FAFAFA;"><span style="color:black;">                  <span style="color:#7F0055;font-weight:bold;">this</span>.copyFile(files.get(i).getInputStream(), files.get(i).getOriginalFilename());  </span></li><li style="font-size:1em;margin-left:38px;background-color:#FAFAFA;"><span style="color:black;">               }  </span></li><li style="font-size:1em;margin-left:38px;background-color:#FAFAFA;"><span style="color:black;">          }  </span></li><li style="font-size:1em;margin-left:38px;background-color:#FAFAFA;"><span style="color:black;">          logger.info(<span style="color:blue;">&quot;success&quot;</span>);  </span></li><li style="font-size:1em;margin-left:38px;background-color:#FAFAFA;"><span style="color:black;">          <span style="color:#7F0055;font-weight:bold;">return</span> <span style="color:blue;">&quot;fileUpload/success&quot;</span>;  </span></li><li style="font-size:1em;margin-left:38px;background-color:#FAFAFA;"><span style="color:black;">         } </span></li></ol> 还很方便的吧，有时间将springmvc的源码跟一遍，至少把它的基本特性都得熟悉了 </p>',12),n=[a];function r(p,i){return o(),e("div",null,n)}const F=l(t,[["render",r],["__file","2012-346.html.vue"]]);export{F as default};
